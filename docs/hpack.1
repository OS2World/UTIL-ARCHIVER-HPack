.\"********************************************************************
.\"*                                                                  *
.\"*                   HPACK Multi-System Archiver                    *
.\"*                   ===========================                    *
.\"*                                                                  *
.\"*                      HPACK Archive Manpage                       *
.\"*                    HPACK.1  Updated 03/11/92                     *
.\"*                                                                  *
.\"*   This program is protected by copyright and as such any use or  *
.\"*      copying of this code for your own purposes directly or      *
.\"*                   indirectly is highly uncool                    *
.\"*            and if you do so there will be....trubble.            *
.\"*        And remember: We know where your kids go to school.       *
.\"*                                                                  *
.\"*       Copyright 1992  Peter C.Gutmann.  All rights reserved      *
.\"*                                                                  *
.\"*     Improved vastly by DaviD W. Sanderson (dws@ssec.wisc.edu)    *
.\"*                                                                  *
.\"********************************************************************
.\"
.\" Macduff: O horror, horror, horror!
.\"          Tongue nor heart cannot conceive nor name thee!
.\" Macbeth: What's the matter?
.\" Macduff: Confusion now hath made his masterpiece.
.\"                                                    - Macbeth, II.i.
.\"-------
.\" Macros I've (dws) vetted, which only use standard -man macros.
.\"-------
.\"-------
.\" Point, w/ leading bullet
.\"
.\" .Pb "text"
.\"-------
.de Pb
.PD 0
.IP \(bu
\\$1
.PD
..
.\"-------
.\" Mini tagged paragraph, whose contents are given
.\"
.\" .Tp "tag" "text"
.\"-------
.\" .de Tp
.\" .PD 0
.\" .TP
.\" .B "\\$1"
.\" \\$2
.\" .PD
.\" ..
.\"-------
.\" Error text description paragraph.
.\"
.\" .Ep "error text"
.\"-------
.de Ep
.PP
.\" .RB [ "\\$1" ]
.Cr "\\$1"
.PD 0
.IP \&
.PD
..
.\"-------
.\" Man page portability notes
.\"
.\" These are some notes on conventions to maintain for greatest
.\" portability of this man page to various other versions of
.\" nroff.
.\"
.\" When you want a \ to appear in the output, use \e in the man page.
.\" (NOTE this comes up in the rc grammar, where to print out '\n' the
.\" man page must contain '\en'.)
.\"
.\" Evidently not all versions of nroff allow the omission of the
.\" terminal " on a macro argument.  Thus what could be written
.\"
.\" .Cr "exec >[2] err.out
.\"
.\" in true nroffs must be written
.\"
.\" .Cr "exec >[2] err.out"
.\"
.\" instead.
.\"
.\" Use symbolic font names (e.g. R, I, B) instead of the standard
.\" font positions 1, 2, 3.  Note that for Xf to work the standard
.\" font names must be single characters.
.\"
.\" Not all man macros have the RS and RE requests (I altered the Ds
.\" and De macros and the calls to Ds accordingly).
.\"
.\" Thanks to Michael Haardt (u31b3hs@cip-s01.informatik.rwth-aachen.de)
.\" for pointing out these problems.
.\"
.\" Note that sentences should end at the end of a line.  nroff and
.\" troff will supply the correct intersentence spacing, but only if
.\" the sentences end at the end of a line.  Explicit spaces, if given,
.\" are apparently honored and the normal intersentence spacing is
.\" supressed.
.\"
.\" DaviD W. Sanderson
.\"-------
.\" Dd	distance to space vertically before a "display"
.\" These are what n/troff use for interparagraph distance
.\"-------
.if t .nr Dd .4v
.if n .nr Dd 1v
.\"-------
.\" Sp	space down the interparagraph distance.
.\"-------
.de Sp
.sp \\n(Ddu
..
.\"-------
.\" Ds	begin a display, indented .5 inches from the surrounding text.
.\"
.\" De	end a display (no trailing vertical spacing)
.\"
.\" Note that uses of Ds and De may NOT be nested.
.\"-------
.de Ds
.Sp
.in +0.5i
.nf
..
.de De
.fi
.in
..
.\"-------
.\" Ws	begin a wide display.  Indent in troff, outdent in nroff.
.\"
.\" We	end a wide display (no trailing vertical spacing)
.\"
.\" Note that uses of Ws and We may NOT be nested.
.\"-------
.de Ws
.Sp
.if t .in +0.5i
.if n .in 0
.nf
..
.de We
.fi
.in
..
.\"-------
.\" I stole the Xf macro from the -man macros on my machine (originally
.\" "}S", I renamed it so that it won't conflict).
.\"-------
.\" Set Cf to the name of the constant width font.
.\" It will be "C" or "(CW", typically.
.\" NOTEZ BIEN the lines defining Cf must have no trailing white space:
.\"-------
.if t .ds Cf C
.if n .ds Cf R
.\"-------
.\" Rc - Alternate Roman and Courier
.\"-------
.de Rc
.Xf R \\*(Cf \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Ic - Alternate Italic and Courier
.\"-------
.de Ic
.Xf I \\*(Cf \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Bc - Alternate Bold and Courier
.\"-------
.de Bc
.Xf B \\*(Cf \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Cr - Alternate Courier and Roman
.\"-------
.de Cr
.Xf \\*(Cf R \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Ci - Alternate Courier and Italic
.\"-------
.de Ci
.Xf \\*(Cf I \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Cb - Alternate Courier and Bold
.\"-------
.de Cb
.Xf \\*(Cf B \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.\"-------
.\" Xf - Alternate fonts
.\"
.\" \$1 - first font
.\" \$2 - second font
.\" \$3 - desired word with embedded font changes, built up by recursion
.\" \$4 - text for first font
.\" \$5 - \$9 - remaining args
.\"
.\" Every time we are called:
.\"
.\" If		there is something in \$4
.\" then	Call ourself with the fonts switched,
.\"		with a new word made of the current word (\$3) and \$4
.\"		rendered in the first font,
.\"		and with the remaining args following \$4.
.\" else	We are done recursing.  \$3 holds the desired output
.\"		word.  We emit \$3, change to Roman font, and restore
.\"		the point size to the default.
.\" fi
.\"
.\" Use Xi to add a little bit of space after italic text.
.\"-------
.de Xf
.ds Xi
.\"-------
.\" I used to test for the italic font both by its font position
.\" and its name.  Now just test by its name.
.\"
.\" .if "\\$1"2" .if !"\\$5"" .ds Xi \^
.\"-------
.if "\\$1"I" .if !"\\$5"" .ds Xi \^
.\"-------
.\" This is my original code to deal with the recursion.
.\" Evidently some nroffs can't deal with it.
.\"-------
.\" .ie !"\\$4"" \{\
.\" .	Xf \\$2 \\$1 "\\$3\\f\\$1\\$4\\*(Xi" "\\$5" "\\$6" "\\$7" "\\$8" "\\$9"
.\" .\}
.\" .el \{\\$3
.\" .	ft R	\" Restore the default font, since we don't know
.\" .		\" what the last font change was.
.\" .	ps 10	\" Restore the default point size, since it might
.\" .		\" have been changed by an argument to this macro.
.\" .\}
.\"-------
.\" Here is more portable (though less pretty) code to deal with
.\" the recursion.
.\"-------
.if !"\\$4"" .Xf \\$2 \\$1 "\\$3\\f\\$1\\$4\\*(Xi" "\\$5" "\\$6" "\\$7" "\\$8" "\\$9"
.if "\\$4"" \\$3\fR\s10
..
.\"-------
.\" PRE reg .o \n(.o
.\" .br
.\" PRE reg .p \n(.p
.\" .br
.\" PRE reg .l \n(.l
.\" .br
.\"-------
.\" Adjust the line length and page offset.
.\" Note that since at least some -man macro packages set one or
.\" both of these explicitly, these settings may or may not work.
.\" For instance, on my system, I can change the page offset.
.\" However, changing the line length has no effect since the -man
.\" macros set the line length explicitly.
.\"-------
.if n .nr n \n(.o
.if n .po -\nnu
.if n .ll +\nnu
.\"-------
.\" Other strings
.\"-------
.if t .ds Tm \(tm
.if n .ds Tm (tm)
.\"-------
.TH HPACK 1 "Ver:0.79a0, 1 May 1993"
.SH NAME
.\" POST reg .o \n(.o
.\" .br
.\" POST reg .l \n(.l
.\" .br
hpack \(em Multi-System Archiver
.SH SYNOPSIS
.B hpack
.I command
.RI [\- options ]
.I archive
.RI [ file |@ scriptfile ]...
.SH DESCRIPTION
The
.I hpack
Multi-System Archiver is an archiver that was written
to allow the transfer of archived data to different systems.
In the past archivers have traditionally been available
for single systems only, for example
.IR PKZIP \*(Tm
and
.I LHARC
for the IBM PC,
.I Larc
for the Amiga,
.IR StuffIt \*(Tm
and
.I Compactor
for the Macintosh, and
.I tar
and
.I compress
for UNIX systems (while these archivers are
available on other systems, their use is not widespread).
It is intended to make
.I hpack
a more universal archiver
by offering versions for the following environments:
.PP
.Pb "Apple IIgs (planned)"
.Pb "Archimedes"
.Pb "Atari ST"
.Pb "Commodore Amiga"
.Pb "Microsoft Windows"
.Pb "Macintosh"
.Pb "MSDOS"
.Pb "OS/2 (16 and 32-bit versions)"
.Pb "OS/2 Presentation Manager (currently in development)"
.Pb "Primos (planned)"
.Pb "UNIX"
.Pb "VMS (currently in development)"
.Pb "Any other system which people offer to port it to"
.PP
Currently Bavarian, Dutch, English, German, Italian, Polish,
Spanish, and Swiss German versions of
.I hpack
using the ASCII, IBM PC, IBM Codepage 850, IBM Codepage 869,
ISO 8859-1 (Latin 1), ISO 8859-2 (Latin 2), ISO 8859-3 (Latin 3),
ISO 8859-4 (Latin 4), Macintosh, Mazovia, and NeXTSTEP character
sets exist.
Anyone wishing to take advantage of these features
should read the section
.B "HPACK Internationalization"
below.
.PP
Note: This documentation is intended mainly as an alternative
to the proper documentation which is in Postscript format.
If possible the proper documentation should be used.
.\"
.SH INVOCATION
.I hpack
is run with the following command:
.PP
.B hpack
.I command
.RI [\- options ]
.I archive
.RI [ file |@ scriptfile ]...
.PP
The allowed values of
.I command
are:
.PP
.PD 0
.TP
.B a
Add files to an archive.
.TP
.B x
Extract files from an archive.
.TP
.B v
Display a directory of files inside an archive.
.TP
.B p
View files within an archive.
.TP
.B t
Test the integrity of an archive.
.TP
.B d
Delete files from an archive.
.TP
.B f
Freshen files to an archive.
.TP
.B r
Replace files in an archive.
.TP
.B u
Update files to an archive.
.PD
.PP
The allowed
.I options
are:
.PP
.PD 0
.TP
.B \-0
Store files without attempting any compression.
.TP
.B \-a
Store file attributes.
.TP
.BI \-b " pathname"
Specify a base
.I pathname
for all files.
.TP
.BI \-c " options"
Encryption
.I options
(conventional and public-key encryption).
.TP
.BI \-d " options"
Directory
.I options
(Mkdir, Rmdir, Mvdir, path options etc).
.TP
.B \-e
Add (or use) error recovery information.
.TP
.B \-f
Force file move into or out of an archive.
.TP
.B \-i
Interactive mode (prompt for all actions).
.TP
.B \-k
Overwrite existing archive.
.TP
.B \-l
Security options (data authentication)
.TP
.B \-m
Create a multipart archive.
.TP
.BI \-o " options"
Overwrite on extraction
.I options
(All, None, Prompt, Smart).
.TP
.B \-r
Recurse through subdirectories.
.TP
.B \-s
Run in stealth mode.
.TP
.B \-t
Touch files on extraction.
.TP
.B \-u
Unified compression mode.
.TP
.BI \-v " options"
View files
.I options
(Files, Directories, All).
.TP
.B \-w
Treat files as archive comments.
.TP
.BI \-x " options"
Text file translate
.I options
(see below).
.TP
.BI + options
Extended
.I options
(usually system-specific, see below).
.PD
.PP
Commands, options, extended options, and archive and file names may
be given in upper or lower case
(they are given in lowercase in the examples which follow merely for
consistency).
Options may be lumped together or may be given separately
preceded by the
.Rc `` \- ''
delimiter.
The option
.Rc `` \-\|\- ''
may be used to indicate that
no more options are present on the command line,
following the standard UNIX convention.
Extended options must be given separately followed by the
.Rc `` + ''
delimiter.
.PP
The default archive extension is
.Rc `` .hpk ''.
.I hpack
will always add this extension
(provided the underlying filesystem supports it),
changing any other given extension if necessary.
Note that some quantum physics theories suggest that
when the user is not directly observing the
.I hpack
archive, it may cease to
exist or will exist only in a vague and indeterminate state;
in this case the existence of the
.Rc `` .hpk ''
extension cannot be guaranteed.
.PP
The filenames field may consist of zero or more filenames,
defaulting to all files if no filenames are given
(in other words archive all files in the
current directory, or dearchive and view all files in the archive).
.I hpack
uses UNIX-style wildcards (which are described in more detail in the
section
.B "HPACK Wildcards"
below),
as well as UNIX-style pathnames in place of the usual ones
used by the systems' command interpreter, so that for example the path:
.Ds
.Cr "/temp/work/files"
.De
.PP
is used instead of the MSDOS equivalent:
.Ds
.Cr "\eTEMP\eWORK\eFILES"
.De
.PP
or the VMS equivalent:
.Ds
.Cr "[TEMP.WORK]FILES"
.De
.PP
or the Archimedes equivalent:
.Ds
.Cr "$.temp.work.files"
.De
.PP
If any additional components are needed,
such as drives, network nodes, or devices,
these can be specified in the manner usual
to the host command interpreter.
For example if the path in the above example were on drive
.Cr a:
under MSDOS the pathname would be:
.Ds
.Cr "a:/temp/work/files"
.De
.PP
If the path in the above example were on the
.Rc `` HOME ''
node,
on device
.Rc `` DISK1 ''
under VMS, the pathname would be:
.Ds
.Cr "home::disk1:/temp/work/files"
.De
.PP
The scriptfiles are names of files preceded with an
.Rc `` @ ''
character.
When
.I hpack
encounters one of these it will treat the filename
as a file containing a list of files to process.
Script files and normal filenames may be freely mixed
on the command line.
See the
section
.B "HPACK Script Files"
below for more information.
.\"
.SH "HPACK Wildcards"
.PP
When
.I hpack
scans any filename that has been given to it, it will check
for the presence in the filename of any of the special characters:
.Ds
.Cr "* ? [ ] \e"
.De
.PP
If one of these is detected, then the string of characters making up the
filename will be treated as being a pattern for a filename,
rather than the name of a specific file.
These special characters have the following meanings
when used in a filename string:
.ft \*(Cf
.nr n \w'[^...]\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.Cr "*"
Matches zero or more characters
.TP
.Cr "?"
Matches any one character
.TP
.Cr "[...]"
Matches any of the enclosed range of characters
.Rc `` ... ''
in turn.
If two characters appearing in the pattern in alphabetical order
are separated by a dash
.Rc `` \- '',
then any character in the alphabetic range between these two
characters will be matched.
This is a more selective version of the
.Rc `` ? ''
form.
.TP
.Cr "[^...]"
As above, but this time matches anything
.I not
in the enclosed range of characters
.Rc `` ... ''.
.TP
.Cr "\e"
Treat the next character as a normal character
rather than one of the special characters.
This can be used to override the usual meaning of the
.Rc `` * '',
.Rc `` ? '',
.Rc `` [] '',
and
.Rc `` \e ''
characters.
Note that the Atari ST, MSDOS, and OS/2 versions of
.I hpack
uses
.Rc `` # ''
instead of
.Rc `` \e ''
since the command interpreter uses
.Rc `` \e ''
in its pathnames.
.PP
The case-sensitivity when handling filenames depends
on the operating system
.I hpack
is being run under.
On the Atari ST and under MSDOS and VMS, filenames
are converted to uppercase, but are not case-sensitive;
on the Amiga, Archimedes, Macintosh and under OS/2, filenames are left
as is, but are also not case sensitive
(so that
.Rc `` FileName ''
will match
.Rc `` Filename '',
.Rc `` FILENAME '',
and
.Rc `` filename '');
and under UNIX, filenames are left as is, and are case sensitive,
so that
.Rc `` makefile ''
and
.Rc `` Makefile ''
are treated as separate names.
.PP
These wildcards can be combined to create quite powerful expressions.
For example, to match any filename not beginning with an
.Rc `` a '',
.Rc `` b '',
.Rc `` c '',
or
.Rc `` f '',
and containing at least two characters,
the required expression would be:
.Ds
.Cr "[^a\-cf]?*"
.De
.PP
where the
.Rc `` [^a\-cf] ''
would match anything
but
.Rc `` a '',
.Rc `` b '',
.Rc `` c '',
or
.Rc `` f '';
the
.Rc `` ? ''
would match the second character required,
and the
.Rc `` * ''
would match any remaining characters.
.PP
For example, if we have an archive whose contents are:
.IP \&
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.Cr file5.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.Cr Index.txt
.PP
we could perform the following file matches on it:
.ft \*(Cf
.nr n \w'file[^13-5].txt\0\0'+1n-1/1n
.ft R
.TP \nn
Expression
Matches files
.PD 0
.PP
.nr l \n(.lu-\n(.iu
.if n \l'\nlu\&-'
.if t \l'\nlu'
.PD
.TP \nn
.Cr *
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.Cr file5.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.Cr Index.txt
.TP
.Cr f*
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.Cr file5.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.TP
.Cr *4*
.Cr file4.txt
.TP
.Cr file?.txt
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.Cr file5.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.TP
.Cr file[1-4].txt
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.TP
.Cr file[^1-4].txt
.Cr file5.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.TP
.Cr file[1-46].txt
.Cr file1.txt
.Cr file2.txt
.Cr file3.txt
.Cr file4.txt
.Cr file6.txt
.TP
.Cr file[^13-5].txt
.Cr file2.txt
.Cr file6.txt
.Cr file7.txt
.Cr file8.txt
.Cr file9.txt
.PD 0
.PP
.PD
.if n \l'\nlu\&-'
.if t \l'\nlu'
.PP
Finally, note that these wildcards may not perform quite like
the standard wildcards used by the system's command interpreter.
For example under GemDOS, MSDOS, and OS/2,
to specify all files in a directory or archive,
it is not necessary to use the usual sequence of
.Rc `` *.* ''.
Instead simply typing
.Rc `` * ''
will match all the files in the archive
(the DOS-like wildcards are in fact a bit of a hack \(em for example
.Rc `` *abc.* ''
will (incorrectly) match
.Rc `` *.* '').
The extended wildcards act as true wildcards,
so that
.Rc `` FILE.* ''
will not match
.Rc `` FILE ''
as it would under DOS, since there is a spurious
.Rc `` . ''
in the DOS wildcard matching.
.PP
These extended wildcards can be useful when extracting files
whose names cannot normally be handled by the command interpreter.
For example, to extract the file
.Rc `` "Filename\ with\ spaces\ in\ it" ''
from the archive
.Cr archive.hpk ,
you would type:
.Ds
.Cr "hpack x archive Filename?with?spaces?in?it"
.De
.PP
where the
.Rc `` ? ''
wildcard will match the spaces.
Alternatively you can just type:
.Ds
.Cr "hpack x archive Filename*"
.De
.PP
which will usually do the same thing with a lot less typing involved.
.PP
Another point is that these wildcards cannot be used
to represent full regular expressions (the idea behind
.I hpack
was to create an archiver, not a regular
expression parser), so that, for example,
.Rc `` *? ''
will not work as an expression,
and that they can only be used inside pathnames when the path
is inside the archive (since the extended wildcards are built
on top of the usual operating system ones (if they exist)
the resulting system would run very slowly if they
had to be simulated on an external filesystem).
.PP
Using wildcards for pathnames inside archives is perfectly legal.
When matching wildcards to pathnames,
.I hpack
follows the standard convention of matching the directory contents
if the directory name is given, or matching the
directory itself when a wildcard matching it is given.
Consider an archive with a subdirectory
.Cr dir ,
with both the archive root directory and the
subdirectory containing files.
Then the following wildcard matches could occur:
.ft \*(Cf
.nr n \w'*/*\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.Cr "*"
Match all files and directories in the root directory
.TP
.Cr "d?r"
Match the directory
.Cr dir
(and possibly other files) in the root directory.
.TP
.Cr "dir"
Match the contents of directory
.Cr dir
(equivalent to
.Rc `` dir/* '')
.TP
.Cr "*/*"
Match all files and directories (equivalent to using
.Rc `` * ''
with the
.RB [ \-r ]ecurse
option).
.PP
Unlike most filesystems,
.I hpack
has no notion of a ``current directory'' within an archive,
so all pathnames must be given relative to the archive root directory.
.PP
Finally, UNIX users may have to either set the shell variable
.Rc `` noglob ''
.RI ( csh )
or quote the wildcard characters used to prevent them being expanded
by the shell if it is required that
.I hpack
handle wildcard expansion.
One case in which this is necessary is when recursively adding files
in subdirectories which match a certain filespec to an archive.
The command
.Ds
.Cr "hpack a \-r test *.h"
.De
.PP
exposes the
.Rc `` *.h ''
filespec to shell wildcard expansion.
The shell will try to match all the files in the current directory whose
names end in
.Rc `` .h '',
and it will not try to match any files in subdirectories.
In contrast:
.Ds
.Cr "hpack a \-d test '*.h'"
.De
.PP
will cause
.I hpack
to perform the wildcard expansion, and will correctly add
files in subdirectories.
Some shells provide other ways to turn off their wildcard expansion.
For instance,
.I csh
user can do the following:
.Ds
.Cr "set noglob"
.Cr "hpack a \-d test *.h"
.Cr "unset noglob"
.De
.PP
and
.I ksh
users can do the following:
.Ds
.Cr "set \-o noglob"
.Cr "hpack a \-d test *.h"
.Cr "set +o noglob"
.De
.\"
.SH "HPACK Commands"
.TP
.B a
Add files to an archive.
The archive given in the command-line is opened, or
created if it doesn't already exist,
and is given the extension
.Rc `` .hpk ''
if this is not explicitly specified.
Then all files given in the list of filenames are added to to it.
.IP \&
Example: To add all files in the current directory to the archive
.Cr archive.hpk
in the current directory:
.Ds
.Cr "hpack a archive"
.De
.TP
.B x
Extract files from an archive.
All files are extracted from the archive given
in the command line to the current directory.
If the file already exists and
no overwrite options are given (these are explained in the
section
.B "HPACK Options"
below), you will be asked if you wish to overwrite it:
.Ds
.Cr "File already exists \- overwrite [y/n/a]"
.De
.IP \&
The answer
.Rc `` y ''
will replace the file with the file from the archive,
.Rc `` n ''
will skip the extraction of this file, and
.Rc `` a ''
will process all files from this point as if a
.Rc `` y ''
answer was given for each file.
In some cases the name of the file extracted will need to be translated
to allow for the naming conventions of different operating systems.
In these cases the original name will be printed,
followed by the name it will be extracted under.
.IP \&
On Apple systems data is divided into two sections in a file,
a ``data fork'' and a ``resource fork''.
Under non-Apple operating systems only the data fork will
be extracted from an archive: the resource fork
(which only Apple systems can make any use of) will be skipped.
.IP \&
Example: To extract all files in
.Cr archive.hpk
not beginning with an
.Rc `` a ''
to the current directory:
.Ds
.Cr "hpack x archive [^a]*"
.De
.TP
.B v
Display a directory of files inside an archive.
If no view options are given (these are explained in the
section
.B "HPACK Options"
below), a listing in the following format is produced:
.ne 20
.Ws
.ft \*(Cf
HPACK - The multi-system archiver Version 0.79a0 (shareware version)
For Amiga, Archimedes, Atari ST, Macintosh, MSDOS, OS/2, and UNIX
Copyright (c) Peter Gutmann 1989 - 1993.  Release date: 1 May 1993
.sp
Archive is 'ARCHIVE.HPK'
.sp
System Length  Size  Ratio   Date     Time    Name
------ ------ ------ ----- -------- --------  -------------------------
 MSDOS  18537   6217  66%  04/05/90 11:32:48  README.TXT
 Atari   8301   3169  74%  27/12/90 21:02:39  LZSS.EXE
 UNIX   30061   9127  70%  24/11/89 16:52:57  compr.method.txt
 OS/2    8481   3282  61%  22/12/90 08:58:52  Comp.test
  Mac       0      0   0%  01/07/91 18:20:20  Fast LZ Decoder using B..
------ ------ ------ -----                    -------------------------
        65380  21795  67%                     Total of 5 files
.sp
Done
.ft R
.We
.IP \&
The archive used is displayed,
followed by a list of all the files within the archive.
The fields for each file inside the archive are as follows:
.RS
.ft \*(Cf
.nr n \w'System\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.Cr System
The system the file was archived under.
.TP
.Cr Length
The length of the file when unarchived.
.TP
.Cr Size
The size of the compressed file within the archive.
.TP
.Cr Ratio
The ratio of the compressed file to the uncompressed file.
.TP
.Cr Date
The creation date of the file within the archive.
.TP
.Cr Time
The creation time of the file within the archive.
.TP
.Cr Name
The name of the file within the archive.
If the name is too long to fit on the
screen then a
.Rc `` .. ''
is appended to indicate this.
In addition files may have a single character prepended to them:
an asterisk
.Rc `` * ''
before the name indicates that this file has been encrypted,
a dash
.Rc `` \- ''
indicates that it includes authentication information, and a hash
.Rc `` # ''
indicates that it is both encrypted
and includes authentication information.
.IP \&
Note that the name within the archive may not be the same
as the name given to the unarchived file since translation
may be necessary to allow for the naming
conventions of different operating systems.
.IP \&
Note also that in the example above the file originating
on the Macintosh has a length of zero bytes.
This does not necessarily mean the total data size is
zero bytes, since files originating on Apple systems
have a second block of data called a resource fork
which contains code and other program resources.
These resources are only useful on Apple systems
and are not shown as part of the total file size on other systems.
.RE
.PP	\" reset prevailing indent
.PD 0
.IP \&
.PD
Finally the total length of all files within the archive,
uncompressed and compressed,
the overall compression ratio for the archive,
and the number of files within the archive, is given.
If any filespecs are given, only files
which match those filespecs will be displayed.
This is useful when you only want to extract certain files
and would like to see how much space they will use.
.IP \&
If more than one archive is viewed,
a grand total of the size and number of
files in all the archives viewed is printed.
The type of information printed
may be controlled by using the view options (which are explained in the
section
.B "HPACK Options"
below).
The default is to print all files and directories in
the root directory of an archive.
If the root directory contains no files or
directories matching the given filenames and/or wildcards,
the error message
.Rc `` "No matching files in archive" ''
will be printed.
To recursively display the contents of all subdirectories, either the
.RB [ \-r ]ecurse
subdirectories option or the wildcard string
.Rc `` */* ''
should be used.
.IP \&
Example: To view the contents of any archives in the current directory
.Ds
.Cr "hpack v *"
.De
.TP
.B p
View files within an archive.
This option will output the contents of one or
more files within an archive, with a prompt for more between files.
The output can be redirected in the standard manner, for example:
.Ds
.Cr "hpack p data contents.doc | lpr"
.De
.IP \&
will send the file
.Cr contents.doc
from within the archive
.Cr data.hpk
to the printer, and:
.Ds
.Cr "hpack p data description.doc | more"
.De
.IP \&
will display the file
.Cr description.doc
with page breaks on your screen.
Note that trying to display non-text files in this manner
can be interesting, if not terribly productive.
.IP \&
Example: To display the file
.Cr readme.txt
from within the archive
.Cr archive.hpk :
.Ds
.Cr "hpack p archive readme.txt"
.De
.TP
.B t
Test the integrity of an archive.
.I hpack
will display the usual messages about
extracting data as it unpacks and tests the data,
and if it thinks the data
has been corrupted it will issue the following warning message:
.Ds
.Cr "Warning: File may be corrupted"
.De
.IP \&
Otherwise
.I hpack
will display:
.Ds
.Cr "File tested OK"
.De
.IP \&
If, when all files have been tested, there were corrupted files,
.I hpack
will print the total number of corrupted files:
.Ds
.Cr "Warning: n files were corrupt"
.De
.IP \&
where n is the number of corrupted files.
.IP \&
Note that this test is also performed automatically on extracting a file
from an archive.
.IP \&
Example: To test the integrity of all MSDOS executable files
in the archive
.Cr archive.hpk :
.Ds
.Cr "hpack t archive *.com *.exe"
.De
.TP
.B d
Delete files from an archive.
All files given in the command-line are deleted from the given archive.
.IP \&
If all files are deleted from an archive (leaving an empty archive),
.I hpack
will delete the archive as well.
.IP \&
Example: To delete all Pascal program files (a commendable move)
from the archive
.Cr archive.hpk :
.Ds
.Cr "hpack d archive *pas"
.De
.TP
.B f
Freshen files in an archive.
The dates of all specified files in the archive
are compared with the dates of the same files on disk.
If the version on disk is more recent than the stored version,
the stored version is replaced by the version on disk.
If all files in the archive are uptodate,
.I hpack
will display the message:
.Ds
.Cr "Archive is uptodate"
.De
.IP \&
and exit.
.IP \&
Example: To freshen all files in the archive
.Cr archive.hpk :
.Ds
.Cr "hpack f archive.hpk"
.De
.TP
.B r
Replace files in an archive.
All given files in the archive are replaced by
their counterparts on disk.
.IP \&
Example: To replace all the files which begin
with the letters a\-g in the archive
.Cr archive.hpk
with their couterparts on disk:
.Ds
.Cr "hpack r archive [a\-g]*"
.De
.TP
.B u
Update files to an archive.
All specified files not already in the archive are added to the archive,
and all files already in the archive are replaced
if the version on disk is more recent than
the version already in the archive.
.IP \&
Example: To update the archive
.Cr archive.hpk
with all files from the directory
.Cr b:/data/junk :
.Ds
.Cr "hpack u archive b:/data/junk"
.De
.IP \&
Note that the last four options need to create
temporary work files on disk.
Thus it is necessary to have at least twice as much free disk space
to work with as the total length of the archive.
All other options use only the archive file,
so it is possible to use them with minimal free disk space.
.\"
.SH "HPACK Options"
.PP
.TP
.B \-0
Store files without attempting any compression.
This option can be used to quickly add incompressible files
to an archive or when breaking up a large file
to move to another system via a multidisk archive when space isn't at a
premium.
.TP
.B \-a
Store file attributes.
Many operating systems support two levels of files,
those classed as ``normal'',
and those classed as ``hidden'', ``invisible'', ``system files'',
and so on (for example the Macintosh, MSDOS, and the Atari ST all have
these file types).
By default
.I hpack
will only add normal files to an archive.
However using the
.RB [ \-a ]ttributes
flag allows archiving
of files with special attributes as well as full restoration
of attributes when archives are extracted.
The
.RB [ \-a ]ttributes
flag is also necessary under some operating
systems to store extra information pertaining to a file,
for example access control information,
file and directory type information, icons, and so on.
.IP \&
.I hpack
will attempt to translate the attributes of files from different systems
into equivalent file attributes for the local system.
This has varying degrees of effectiveness:
Many of the Apple IIgs, Atari ST, Macintosh, MSDOS, and OS/2
attributes are equivalent so a direct translation is possible,
and the Amiga, the Apple IIgs, the Archimedes, UNIX,
and VMS also have some of the read/write attributes in common,
and have a rough equivalent of a read-only file attribute
in these attributes.
.IP \&
If directories were stored within the archive,
.I hpack
will also store directory attributes,
and set the directory attributes to the stored values when creating
the directories on extraction.
.IP \&
Example: To extract all files in the root directory of the archive
.Cr archive.hpk ,
restoring all possible attribute information:
.Ds
.Cr "hpack x \-a archive"
.De
.TP
.B \-b
Specify a base pathname for all files.
This option is followed by the pathname which
.I hpack
will use as a base path for all files to be added to or extracted
from an archive.
This option is very convenient when adding a number of files
in the same directory to an archive or when extracting an archive to a
directory which is not the same as the current directory.
It is also useful for handling archives which contain subdirectories.
To add files to a subdirectory within
.IR hpack ,
the base pathname is used to specify the path to the
subdirectory, with the actual file pathname given being the path inside
.I hpack
in which the file will be stored.
In this case the argument given with the
.RB [ \-b ]ase
path option is the part of the pathname outside the archive,
and the file pathname is the part of the pathname inside the archive.
.IP \&
Example: To extract all files in the archive
.Cr archive.hpk
to the directory
.Cr d:/output/data :
.Ds
.Cr "hpack x \-bd:/output/data archive"
.De
.IP \&
Example: To add the files
.Cr file1 ,
.Cr file2 ,
.Cr text ,
and
.Cr program.exe ,
all in the directory
.Cr d:/junk/data ,
to the archive
.Cr archive.hpk :
.Ds
.Cr "hpack a \-bd:/junk/data archive file[1-2] text program.exe"
.De
.IP \&
Example: To add the files in
.Cr c:/junk/data/files
to the archive
.Cr archive.hpk
inside the archive directory
.Cr data/files :
.Ds
.Cr "hpack a \-bc:/junk archive data/files/*"
.De
.TP
.B \-c
Encryption options (conventional and public-key encryption).
Encrypt/decrypt archive data using a selection of public- and
conventional-key encryption algorithms.
Using this option with conventional-key encryption will prompt for
a passphrase before any files are added,
followed by a request to retype the
passphrase for security if the data is being encrypted.
This passphrase, which is not echoed to the screen,
should be a minimum of eight and a maximum of eighty characters long,
and may contain any combination of upper and lowercase letters,
numbers, spaces, punctuation symbols, and control characters.
If public-key encryption is used,
the
.I userID
of the recipient of the data is
specified as part of the encryption command.
Although
.I hpack
itself will support non-ASCII text strings,
the
.IR userID s
for public keys must be in ASCII
format for compatibility with other programs.
Be warned that forgetting or losing a conventional
or public-key encryption key will present you with a
fairly substantial exercise in cryptography.
.IP \&
By default
.I hpack
will encrypt entire archives (rather than just the files in them),
meaning that not even the archive directory can be read by someone who
does not have the decryption password.
.IP \&
The encryption options are divided into two classes, those employing
conventional-key encryption and those employing public-key encryption:
.RS
.TP
.B \-c
Use conventional-key encryption to encrypt the entire archive,
the same as
.RB [ \-c ]rypt
.RB [ a ]ll.
.TP
.B \-ci
Encrypt individual files using conventional-key encryption.
The use of this option is not generally recommended
as it is not quite as secure as the standard
.RB [ \-c ]rypt
.RB [ a ]ll
option.
It is however useful when only a few files need to be encrypted,
the rest being subject to constant change which makes
encrypting them impractical.
.TP
.B \-ca
Encrypt entire archive.
This will encrypt not only the files themselves but
all additional data associated with them (attributes, icons, and so on),
as well as the archive directory information.
The only remaining accessible data
is a small amount of archive identification information needed to allow
.I hpack
to process the archive.
.TP
.B \-cs
Prompt for second password to access archive data.
This allows the archive directory to be encrypted with one password,
and files to be encrypted with another password.
This option is useful if it is desirable to give a group of
users access to the archive directory but not to the files themselves,
since the contents of the archive can be made available
with the first password,
but a second password is required to access the files themselves.
.TP
.BI \-cpi <userID>
Encrypt individual files using the public key
which matches the given
.IR userID .
The public-key-encryption equivalent of the
.RB [ \-c ]rypt
option.
This option is not recommended if more than a small number of files
are present in an archive due to the amount of time
needed to perform each public-key decryption calculation.
.TP
.BI \-cpa <userID>
Encrypt the entire archive using the public key
which matches the given
.IR userID .
The public-key-encryption equivalent of the
.RB [ \-c ]rypt
.RB [ a ]ll
option.
.TP
.BI \-cps <userID>
Encrypt the archive with a secondary public key
which matches the given
.IR userID .
The public-key-encryption equivalent of the
.RB [ \-c ]rypt
.RB [ s ]econdary
option.
.RE
.IP \&
When processing an encrypted archive, all that is necessary is to tell
.I hpack
to handle encrypted data by specifying the
.RB [ \-c ]rypt
option.
.I hpack
will determine the encryption type
and prompt for passwords as necessary as it processes the archive.
If the archive is public-key encrypted and the recipients secret key
is protected by encryption,
.I hpack
will prompt:
.Ds
.Cr "Please enter password for secret key (8..80 characters)"
.De
.IP \&
If an incorrect password is given,
.I hpack
will warn:
.Ds
.Cr "Password is incorrect."
.De
.IP \&
and allow the password to be reentered.
Up to three attempts at the password are allowed before
.I hpack
gives up.
.IP \&
When searching for the key corresponding to a given
.IR userID ,
.I hpack
will perform a case-insensitive match of the given
.I userID
against any part of the keys
.IR userID .
This means that only a partial
.I userID
need be given on the command line, and
.I hpack
will use the first key for which the partial
.I userID
matches.
This makes specifying the
.I userID
easier since the entire
.I userID
need not be given, but also means care should be taken
if there are several similar
.IR userID s
(all of which may match a certain
.I userID
fragment) in a collection of keys.
In all cases these
.IR userID s
act exactly like they do in PGP.
.IP \&
If there is a chance that the
.I userID
is ambiguous, the key can also be
specified by its
.I keyID
using the standard C programming language format
for hexadecimal values, namely a prefix of
.Rc `` 0x ''
and then the value itself.
The
.I keyID
is the 6-digit hexadecimal value displayed for the key.
As with
.IR userID s,
.I hpack
will perform a case-insensitive match against any part of the full
.IR keyID .
.IP \&
.I hpack
will also allow the public-key encryption of data for multiple
recipients, meaning that a single encrypted archive can be sent to an
arbitrarily large number of recipients.
This allows archives to be distributed
to working groups or via mailing lists without necessitating a separate
encrypted archive for each recipient.
Note that there is a slightly increased risk involved in this process
since the chain of intended recipients is only as
strong as its weakest link \(em only one of the private keys needs to be
compromised to render the encrypted data insecure.
.IP \&
The use of encryption for multiple recipients is
specified by enclosing a comma-seperated list of recipient
.IR userID s
or
.IR keyID s
inside a key-or construct:
.Ds
.Cr "or(user1,user2,...userN)"
.De
.IP \&
On decryption, the data can be decrypted by
.I user1
or
.I user2
or
.IR "... userN" .
Future versions of HPACK will also allow key-and (where all
of a given list of keys must be used to decrypt data) and
key-quorum (where a certain proportion of a given number of
keys must be used to decrypt data).
.IP \&
In addition there are moves afoot to add a mailing-list
capability to the public keyring format which will be fully supported by
.I hpack
if it eventuates.
.IP \&
Example: To encrypt the entire archive
.Cr archive.hpk ,
leaving only a small amount of identification information readable:
.Ds
.Cr "hpack a \-c archive"
.De
.IP \&
Example: To encrypt all files to be added to the archive
.Cr archive.hpk :
.Ds
.Cr "hpack a \-ci archive"
.De
.IP \&
Example: To encrypt the entire archive
.Cr archive.hpk
with the archive directory
readable by
.Rc `` TheMunsters ''
but the archive data itself only readable by
.Rc `` UncleFester '':
.Ds
.Cr "hpack a \-cpaTheMunsters \-cpsUncleFester archive"
.De
.IP \&
Example: To encrypt the file
.Cr baseball.bat
in the archive
.Cr archive.hpk
with the key corresponding to the hexadecimal
.I keyID
A72F3B, taking advantage of the fact that
.I hpack
will match any fragment of the
.IR keyID :
.Ds
.Cr "hpack a \-cpi0x2f3 archive baseball.bat"
.De
.IP \&
Example: To encrypt the entire archive
.Cr archive.hpk
making it readable by either
.Rc `` Boris '',
.Rc `` Igor '',
or
.Rc `` Ivan '':
.Ds
.Cr "hpack a \-cpaor(Boris,Igor,Ivan) archive"
.De
.IP \&
Note that the public-key decryption process can take a long time,
especially when it must be performed multiple times
(for example when the
.RB [ \-c ]rypt
.RB [ p ]ublic-key
.RB [ i ]ndividual
files option is used).
.I hpack
will display the message:
.Ds
.Cr "One moment..."
.De
.IP \&
whenever it performs the calculations involved in public-key decryption.
This process can often take significantly longer
than one moment \(em on slower machines
.I hpack
may appear to have ground to a halt as it performs the
public-key decryption operation.
Unless there is a special need for it,
the use of conventional-key encryption is recommended.
.IP \&
One advantage of public-key encryption is that the key management
is automatic \(em there is no need to enter passwords
to perform the encryption and decryption operations.
When passwords must be entered manually for conventional-key encryption,
there is a chance that an incorrect password will be entered by mistake.
If this happens for archive directories,
.I hpack
will warn:
.Ds
.Cr "Warning: Archive directory corrupted, probably due to"
.Cr "incorrect password.  Continue (y/n)"
.De
.IP \&
Since the password was incorrect,
the archive directory information has been decrypted incorrectly.
The
.Rc `` n ''
option should be selected and the password reentered.
.IP \&
If this happens for archived files,
the files will not be extracted properly:
.Ds
.Cr "Warning: File may be corrupted"
.De
.IP \&
Again, the password should be reentered when
.I hpack
is re-run.
.TP
.B \-d
Directory options.
This hideously complicated command has a large number of suboptions.
Normally
.I hpack
will store any directories it finds files in inside an archive,
in effect allowing you to archive entire directory trees.
These directory options allow more precise control over the storing
of directories inside the archive.
.IP \&
.I hpack
will add directories traversed only if there are files
contained in them.
To add all directories
regardless of whether they contain files or not, use the
.RB [ \-d ]irectories
.RB [ a ]ll
option (see below).
.IP \&
The extended directory options are are as follows:
.RB ( "Note: Some of these aren't implemented yet:"
Feedback on whether this way of doing things is a good idea or not
would be appreciated.)
.RS
.TP
.B \-da
Store or extract all directories scanned, even if they contain no files.
This option is useful for storing entire filesystems inside archives
and restoring entire directory trees from archives.
.TP
.B \-dc
Create only immediate containing directory for a group of files,
not the entire directory path.
This is mainly for use by GUI versions of
.I hpack
to allow extraction of individual directories, folders, or drawers
(depending on what the host operating system calls them) of files.
.TP
.B \-df
Flatten directories.
This option can be used to prevent
.I hpack
from storing directories, so that all files added or extracted
are placed in the same directory, in effect flattening the
directory structure.
.TP
.B \-dm
Mkdir: Create the given directories.
.RB ( "Not yet implemented"
\(em if necessary this can be faked by using
.Rc `` "hpack a \-da" "<path> <non-matching filespec>''"
where
.I path
is the new directory to add and the
.I "non-matching filespec"
ensures that only the new directory,
but none of the files in it, are added.)
.TP
.B \-dn
Do not create the directory inside the archive
if it doesn't already exist.
If an attempt is made to add a file to a nonexistent directory,
.I hpack
will exit with the error message:
.Ds
.Cr "Path not found"
.De
.TP
.B \-dr
Rmdir: Delete the given directories.
.RB ( "Not yet implemented" )
.TP
.B \-dv
Mvdir: Move the given directory into the second given directory.
.br
Warning: Through injudicious use of this command
it is possible to create circular directory references,
or to cut off entire directory trees.
Do not try to move directories into subdirectories of themselves!
(Or should
.I hpack
check for this?)
.RB ( "Not yet implemented" )
.RE
.IP \&
Example: To delete the directory
.Cr data/junk
inside the archive
.Cr archive.hpk :
.Ds
.Cr "hpack a \-dr archive data/junk"
.De
.IP \&
Note the use of the
.RB [ a ]dd
command as a dummy command:
In this case the main
command is ignored and only the directory option is used (ICK!).
.IP \&
Example: To move all files and directories in and below
.Cr data/junk
in the archive
.Cr archive.hpk
into the directory
.Cr stuff :
.Ds
.Cr "hpack a \-dv archive data/junk stuff"
.De
.IP \&
Example: To add all files and directories (even empty ones)
in and below the current directory to the archive
.Cr archive.hpk :
.Ds
.Cr "hpack a \-rda archive"
.De
.TP
.B \-e
Add (or use) error recovery information.
This option allows the adding of error
recovery information to the archive when adding files,
or makes use of error recovery information present in an archive.
.I hpack
will write extra information with the file data which may be used
to recover the data if the main archive directory is seriously damaged.
This recovery information will increase the
amount of data stored for each file by about 20\-25 bytes.
Note that although
.I hpack
will add this extra information,
the current version will not make use of it.
.IP \&
Example: To add all text files in the directory
.Cr a:/data
to archive
.Cr archive.hpk ,
adding error recovery information for each file:
.Ds
.Cr "hpack \-e archive a:/data/*.txt"
.De
.IP \&
Example: To extract the same files from the archive,
making use of the error recovery information:
.Ds
.Cr "hpack x \-e archive *.txt"
.De
.TP
.B \-i
Interactive mode \(em prompt for all actions.
This option works for all commands
except
.RB [ v ]iew
files (for which it would be pointless).
Before the file is processed,
.I hpack
will ask whether you wish to process this file; answering
.Rc `` y ''
will handle the file,
.Rc `` n ''
will skip the file, and
.Rc `` a ''
will process all files from this point
(in other words it will assume a
.Rc `` y ''
answer for each file from
this point).
.IP \&
Example: To add all files in the current directory to the archive
.Cr archive.hpk ,
prompting for each file before adding it:
.Ds
.Cr "hpack a \-i archive *"
.De
.TP
.B \-f
Force file move into or out of an archive.
This option can be used with the
.RB [ a ]dd,
.RB [ f ]reshen,
.RB [ r ]eplace,
.RB [ u ]pdate,
and
.RB [ x ]tract
commands
to move the files
instead of merely copying the data into or out of an archive.
Note that when the move option is used in conjunction with encryption,
.I hpack
will go to
extreme lengths to destroy any traces of the file which is being moved.
Caution is recommended when using move with encryption as forgetting the
password or using the wrong public key will lead to the permanent
loss of the encrypted data.
.IP \&
If all files are moved out of an archive (leaving an empty archive),
.I hpack
will delete the archive as well.
.IP \&
Example: To move all text files from the archive
.Cr archive.hpk
into the current directory:
.Ds
.Cr "hpack x \-f archive *.txt"
.De
.TP
.B \-k
Overwrite existing archive.
This only works with the
.RB [ a ]dd
command.
Normally, using the
.RB [ a ]dd
command will add any new files to the end of an existing archive.
Using the
.RB [ \-k ]ill
switch will erase the old archive and create a new
one.
.IP \&
Example: To create the archive
.Cr archive.hpk
on drive
.Cr a: ,
overwriting it if it already exists,
and add all files in the current directory to it:
.Ds
.Cr "hpack a \-k a:archive"
.De
.TP
.B \-l
Security options (data authentication).
This option allows the encapsulation of either entire archives
or individual files inside a secure envelope which it
is computationally infeasible to break.
This option allows anyone to later
determine that the data has been both untampered with,
and genuinely came from
the source (corresponding to the
.IR userID )
from which it claims to have originated.
.IP \&
When searching for the key corresponding to a given
.IR userID ,
.I hpack
will perform a case-insensitive match of the given
.I userID
against any part of the keys
.IR userID .
This means that only a partial
.I userID
need be given on the command
line, and
.I hpack
will use the first key for which the partial
.I userID
matches.
This makes specifying the
.I userID
easier since the entire
.I userID
need not be given, but also means care should be taken
if there are several similar
.IR userID s
(all of which may match a certain
.I userID
fragment) in a collection of keys.
In all cases these
.IR userID s
act exactly like they do in PGP.
.IP \&
If there is a chance that the
.I userID
is ambiguous, the key can also be
specified by its
.I keyID
using the standard
C programming language format for
hexadecimal values namely a prefix of
.Rc `` 0x ''
and then the value itself.
The
.I keyID
is the 6-digit hexadecimal value displayed for the key.
As with
.IR userID s,
.I hpack
will perform a case-insensitive match against any part of the full
.IR keyID .
.IP \&
If the secret key is protected by encryption,
.I hpack
will prompt:
.Ds
.Cr "Please enter password for secret key (8..80 characters)"
.De
.IP \&
If an incorrect password is given,
.I hpack
will warn:
.Ds
.Cr "Password is incorrect."
.De
.IP \&
and allow the password to be reentered.
Up to three attempts at the password are allowed before
.I hpack
gives up.
.IP \&
The security options are as follows:
.RS
.TP
.BI \-l <userID>
Secure the entire archive with security information from a given
.IR userID .
.TP
.BI \-li <userID>
Secure individual files rather than the archive as a whole,
with security information for a given
.IR userID .
The use of this option is not generally
recommended since the generation of the security information
for each file can consume a considerable amount of time,
and since only the files themselves are
secured it leaves the file attributes and directory information open to
modification.
It is however useful when only a few files need to be secured,
the rest being subject to constant change which makes securing them
impractical.
.RE
.IP \&
Example: To create the archive
.Cr archive.hpk ,
add all files in the current
directory to it, and secure it on behalf of your cat:
.Ds
.Cr "hpack a \-lthecat archive"
.De
.TP
.B \-m
Create a multipart archive.
Normally when
.I hpack
runs out of disk space it will exit with an error message.
When this option is used
.I hpack
will instead prompt
for another disk and continue the archive on the new disk.
In this manner it is possible to spread an archive
which would be too large for a single disk over several disks.
Due to their rather special nature, multipart archives do
not support the
.RB [ d ]elete,
.RB [ f ]reshen,
.RB [ r ]eplace,
or
.RB [ u ]pdate
commands
(since, for example, deleting a file from the middle of an archive
which stretches over 15 disks would be quite time-consuming).
All other operations are supported however.
.IP \&
Example: To fully back up hard drive
.Cr c:
onto drive
.Cr a:
.Ds
.Cr "hpack a \-kmarda a:archive c:/*"
.De
.IP \&
This will create the archive
.Cr archive.hpk
on one or more disks
in drive
.Cr a:
containing the complete contents of the drive
.Cr c:
(the options used are
.RB [ \-k ]ill
existing archive,
.RB [ \-m ]ultipart
archive,
store file and directory
.RB [ \-a ]ttributes,
.RB [ \-r ]ecurse
through all subdirectories,
for
.RB [ \-d ]irectories
store
.RB [ a ]ll
of them, even empty ones).
Once each disk has been completely filled,
.I hpack
will prompt:
.Ds
.Cr "Please insert the next disk and press a key"
.De
.IP \&
followed by the message:
.Ds
.Cr "Continuing..."
.De
.IP \&
as it continues the archive on the next disk inserted.
Note the use of the
.RB [ \-k ]ill
existing archive option to overwrite any existing archive
of the same name which may already exist on the disk \(em if
.I hpack
finds an archive of the
given name already on the disk and the
.RB [ \-k ]ill
option is not specified,
it will not, by default,
overwrite it but will exit with an error message.
.IP \&
Multipart archives have a minimum size of around 500 bytes
(roughly the size of a disk sector for many disk formats \(em
storing archive parts of less than 500-odd bytes would be pointless).
If a section of a multi-part archive is
less than approximately 500 bytes
.I hpack
will skip it and move it to the next
(hopefully less full) disk after printing the following warning:
.Ds
.Cr "Warning: Archive section too short, skipping..."
.De
.IP \&
If a multipart archive is small enough to fit onto a single disk,
.I hpack
will
store the archive as a standard archive instead of a multipart one.
.IP \&
Example: To view the files in the previously created multipart archive:
.Ds
.Cr "hpack v a:archive"
.De
.IP \&
.I hpack
will automatically determine whether the archive is a multipart archive
or not so the
.RB [ \-m ]ultipart
command is only necessary when creating the archive.
Since
.I hpack
stores its directory information at the end of the archive, only
the last disk or disks of the archive must be read to obtain the archive
directory.
Initially
.I hpack
will prompt:
.Ds
.Cr "Please insert the disk containing the last part of this archive"
.Cr "and press a key."
.De
.IP \&
If the wrong disk is inserted,
.I hpack
will prompt:
.Ds
.Ci "This is part " n " of a multipart archive."
.Cr "Please insert the disk containing the last part of this archive"
.Cr "and press a key."
.De
.IP \&
where
.I n
is the part number of this section of the archive.
.IP \&
Example: To extract the single file
.Cr letter.txt
from the previously created archive:
.Ds
.Cr "hpack x a:archive letter.txt"
.De
.IP \&
.I hpack
will then prompt for the disk which contains the file
.Cr letter.txt :
.Ds
.Ci "Please insert the disk containing part " n " of this archive"
.Cr "and press a key."
.De
.IP \&
where
.I n
is the part number of the archive section which contains
.Cr letter.txt .
.IP \&
Example: To fully restore the contents of a hard drive
from the previously created archive:
.Ds
.Cr "hpack x \-arda a:archive"
.De
.IP \&
.I hpack
will prompt for the last part of the archive as usual and then for
each disk in turn as it extracts the files from the archive.
.TP
.B \-o
Overwrite on extraction options.
Normally when
.I hpack
tries to extract a file which already exists,
it will prompt for whether the existing file should be
overwritten or not.
With this switch it is possible to specify a default
action to be taken.
There are four possibilities:
.RS
.TP
.B \-oa
Automatically overwrite
.RB [ a ]ll
existing files on extraction.
.TP
.B \-on
Automatically overwrite
.RB [ n ]one
of the existing files on extraction.
.TP
.B \-os
.RB [ s ]mart
overwrite.
.I hpack
will change the extension of the file to be extracted to
.Rc `` 000 '',
and try to extract this file.
If a file of this name already exists,
the extension will be changed to
.Rc `` 001 ''
and so on until it is possible to extract the file.
This option is very useful for files that have been
archived on a system which allows filenames which are longer
or more complex than those allowed by the local system
and which due to the filename being
truncated or translated end up with identical names.
Note that the term ``extension'' can mean different things
to different operating systems \(em
.I hpack
will do its best to use the local equivalent.
.TP
.B \-op
.RB [ p ]rompt
for new filename.
.I hpack
will ask for a new filename and try to use that name,
repeating until a non-conflicting filename is given.
.RE
.IP \&
Example: To extract all files from the archive
.Cr archive.hpk
to the current directory, skipping any files that already exist:
.Ds
.Cr "hpack x \-on archive"
.De
.TP
.B \-r
Recurse through subdirectories.
.I hpack
will step through all sub-directories of the current directory,
and add all files with names matching those given on the command line.
.IP \&
Example: To add all files in all directories in and below
the current directory to the archive
.Cr archive.hpk :
.Ds
.Cr "hpack a \-r archive *"
.De
.TP
.B \-s
Run in stealth mode.
All messages except warnings and error messages are suppressed.
.I hpack
will automatically turn on stealth mode if it detects it is
running in the background on operating systems which support background
operation.
.IP \&
Example: To add all files in the current directory to all archives
in the current directory,
without printing the usual progress reports to the screen:
.Ds
.Cr "hpack a \-s *"
.De
.TP
.B \-t
Touch files on extraction.
Normally
.I hpack
will give all files and directories extracted the original date
they had when they were archived.
Using the
.RB [ \-t ]ouch
option will give files and directories the current date.
.IP \&
Example: To extract all files from the archive
.Cr archive.hpk ,
giving them todays datestamp:
.Ds
.Cr "hpack x \-t archive"
.De
.TP
.B \-u
Unified compression mode.
In this mode
.I hpack
will attempt to achieve increased
compression by using unified compression across all files to be added.
This is especially effective when many generally similar files
or many small files are being added to an archive.
The disadvantage of unified compression is that the
archive cannot be updated or changed later,
and that when extracting individual
files there is a slight speed penalty as intervening files are skipped.
Unified compression is ideal for storing data like Usenet news articles,
collections of icons, and program source code,
in which cases significant compression gains are usually seen.
.IP \&
Example: To all all files in
.Cr /usr/spool/news/comp/compression
to the archive
.Cr compress.hpk
using the unified compression mode:
.Ds
.Cr "hpack a \-u compress /usr/spool/news/comp/compression/*"
.De
.TP
.B \-v
View options.
Normally when the
.RB [ v ]iew
command is used,
.I hpack
will print information on all the directories and files in
an archive.
With these options it is possible
to specify which parts of the archive directory are to be
viewed.
There are three possible options:
.RS
.TP
.B \-vf
Display information only on matching files.
.TP
.B \-vd
Display information only on matching directories.
This option is sexually transmitted.
.RE
.IP \&
Example: To print all the files,
but not any directories or subdirectories, in the archive
.Cr archive.hpk :
.Ds
.Cr "hpack v \-vf archive.hpk"
.De
.TP
.B \-w
Treat files as archive comments.
This makes the
.RB [ a ]dd,
.RB [ d ]elete,
.RB [ f ]reshen,
.RB [ r ]eplace,
and
.RB [ u ]pdate
commands work for archive comments instead of normal files.
Archive comments are files which are displayed when the
.RB [ v ]iew
archive
command is used, and may contain text describing the contents
of the archive, ANSI extended characters, graphics, digitised sound,
even full motion video with 16-bit stereo sound if desired.
Most CLI versions of
.I hpack
will currently only handle the displaying of plain text,
although some will handle ANSI-text type archive comments as well.
Comments can be added, deleted, replaced,
and so on just like normal files.
Subdirectories can contain their own comments,
and each directory can contain multiple comment files.
In addition comment filenames are not treated
as normal archive filenames, so a directory can
contain a comment file and a normal archived file of the same name.
Possible archive comment types are:
.RS
.TP
.B \-w
Plain text comment.
This can be entered in free-form since
.I hpack
will automatically word wrap the text to fit the screen size.
Plain text comments may also contain formatting commands
which control the way the text is displayed.
For more information on formatting the text comments, see the
extended documentation file
.Cr hpackext.doc .
.TP
.B \-wa
ANSI text comment.
This type of comment can contain the extended 8-bit
character set used by IBM PC's, as well as ANSI escape codes.
No reformatting of any type is done on ANSI comments.
Note that the plain text comment type is preferred,
since many systems cannot display the extended ANSI character set or
interpret ANSI escape codes.
Also note that if an ANSI comment is stored as plain text
.I hpack
will quietly delete all extended characters and ANSI escape
codes when it displays the comment,
to make it conform to the 7-bit ASCII character set.
.TP
.B \-wg
GIF format graphics comment.
Display of this comment format is generally only
suported on systems running graphics-based user interfaces.
.RE
.IP \&
Example: To view all comment-type files in the archive
.Cr archive.hpk
as files instead of displaying them as comments:
.Ds
.Cr "hpack v \-w archive.hpk"
.De
.TP
.B \-x
Text file translate options.
Different systems store text files in different formats,
for example on the Amiga, the Archimedes, and under UNIX, these are
stored in ASCII format with a linefeed at the end of each line;
on the Atari ST and under MSDOS and OS/2,
there are carriage return/linefeed pairs at the end of each line;
and on the Macintosh,
there are carriage returns at the end of each line.
Some systems store text in a non-ASCII format altogether,
for example IBM systems which use the EBCDIC character set,
and Prime systems which use their own bizarre text encoding technique.
Using this option it is possible to specify translation
of different character systems and end-of-line markers
to the one used by the local system.
In most cases the
.RB [ \-x ]late
option will suffice,
however it is possible to override the translation using
the following options:
.RS
.TP
.B \-x
Smart translate.
.I hpack
will attempt to translate all files it recognises as text files
from the textfile format used on the system the file was archived
on to the textfile format used on the system
the file is being extracted on.
In most cases this option will be the only one necessary.
.TP
.B \-xr
Treat carriage return (ASCII 13) as end-of-line marker.
The Macintosh stores text this way.
.TP
.B \-xl
Treat linefeed (ASCII 10) as end-of-line marker.
Text on the Amiga, the Archimedes, and UNIX systems
is stored in this manner.
.TP
.B \-xc
Treat carriage return/linefeed pairs as end-of-line marker.
The Atari ST, MSDOS and OS/2 store text files like this.
.TP
.BI \-xx nn
Treat the one- or two-character hexadecimal value
.I n
or
.I nn
as the character to use as the end-of-line delimiter.
For example when moving textfiles from a QNX
.RI 2. x /3. x
system (which uses the RS character, ASCII 30 or 1E hexadecimal),
the option would be
.BR \-xx 1e.
.TP
.B \-xe
Translate the character set from EBCDIC to ASCII.
Text on IBM systems is stored this way.
.TP
.B \-xp
Translate the character encoding from that used on Prime systems
to ASCII.
.TP
.B \-xa
Translate from ASCII to ASCII.
.RE
.IP \&
The textfile translation works by first translating
entire character sets
(either ASCII, Prime ASCII or EBCDIC) if necessary,
and then translating the end-of-line characters,
depending on the options specified.
.IP \&
The end-of-line translation options are only available
where they would make sense
(for example the ability to translate linefeed to linefeed isn't
particularly useful).
The possible translation options are shown below,
with LF being the linefeed character,
CR being carriage return,
and CRLF being carriage return/linefeed pairs:
.IP \&
.\"--------------------------------------------------------------------
.ne 15
.if n .ds Br |
.if t .ds Br \&
.if n .ds El ---
.if t .ds El \(em
.nf
.nr t0 \w'Archimedes'u/2u
.nr t1 \n(t0+((3m+\w'Archimedes'u)/2u)
.nr t2 \n(t1+((6m+\w'CR\(->CRLF'u)/2u)
.nr t3 \n(t2+(3m+\w'Archimedes'u)
.nr t4 \n(t3+(3m+\w'Macintosh'u)
.ta \n(t0uC \n(t1u \n(t2uC \n(t3uC \n(t4uC
.\" set n to length of longest line
.di xx
Archimedes	\*(Br	CR\(->CRLF	Archimedes	Macintosh
.nr n \n(.nu
.di
.rm xx
.mk tp
	To \(->\&	\*(Br	Atari ST	Amiga\&\&	Macintosh
	\&\&\&\&	\*(Br	MSDOS\&\&	Archimedes
	From\&\&\&	\*(Br	OS/2\&\&	UNIX
.if n \l'\nnu\&-'
.if t \l'\nnu'
	Atari ST	\*(Br	\0\&\&\&	\-xc\&\&\&	\-xc
	MSDOS\&\&\&	\*(Br	\*(El\&\&	CRLF\(->LF	CRLF\(->CR
	OS/2\&\&	\*(Br
	\&\&\&\&	\*(Br
	Amiga\&\&	\*(Br	\-xl\&\&\&	\0\&\&\&	\-xl
	Archimedes	\*(Br	LF\(->CRLF	\*(El\&\&	LF\(->CR
	UNIX\&\&	\*(Br
	\&\&\&\&	\*(Br
	Macintosh	\*(Br	\-xr\&\&\&	\-xr\&\&\&	\0
	\&\&\&\&	\*(Br	CR\(->CRLF	CR\(->LF	\*(El
.if t	\&	\L'|\n(tpu-1'\L'-|\n(tpu+1'
.fi
.\"--------------------------------------------------------------------
.IP \&
Example: To extract all files with the extension
.Cr .txt
from the archive
.Cr archive.hpk ,
translating linefeed characters into whatever end-of-line
character the local system uses:
.Ds
.Cr "hpack x \-xl archive *.txt"
.De
.IP \&
Example: To extract all files with the extension
.Cr .txt
from the archive
.Cr archive.hpk ,
translating the files from EBCDIC to ASCII, and translating all
carriage return characters to the end-of-line character
used by the local system:
.Ds
.Cr "hpack x \-xexr archive *.txt"
.De
.\"
.SH "HPACK Extended Options"
The extended options supported by
.IR hpack
are usually somewhat system-specific and in general will only be
present on one particular version of
.IR hpack .
They either support the storing or extraction
of system-specific information in archives, or the special
handling of data which has been archived on another system.
The recognised options are:
.RS
.TP
.B +devcheck
MSDOS version only.
Check all files for
.RB [ s ]afe
extraction.
MSDOS has a serious problem in that when a file with the same name
as a device driver is extracted (for example
.Rc `` CON '',
.Rc `` COM1 '',
or
.Rc `` LPT1 '')
it will force the contents of that file into the device driver.
The damage can be minor for devices like
.Rc `` CLOCK$ ''
(it will at a minimum mangle the system date and time, perhaps
scramble the CMOS ram, or cause the system to hang \(em
even the changing of system dates can cause problems
on a system running a computer bulletin board
which relies on correct timestamps),
all the way through to very serious for
devices like
.Rc `` SMARTAAR ''
(it will corrupt the disk cache and therefore corrupt
the drives being cached).
.IP \&
The
.B +devcheck
option will check each file before extracting it, and if it
corresponds to a device driver will print the warning:
.Ds
.Cr "File corresponds to device driver \- skipping"
.De
.IP \&
and move on to the next file.
The only way in which
.I hpack
will allow a file of this type to be extracted is by using the
.RB [ \-o ]verwrite
.RB [ p ]rompt
option,
in which you will be prompted for a new filename to extract under.
Even
.RB [ \-o ]verwrite
.RB [ s ]mart
is unsafe since the peculiar handling
of device drivers by DOS makes the automatic substitution
of a new filename very difficult.
.IP \&
Filenames which can cause these problems are virtually unheard-of \(em
they would have to be created deliberately by a malicious user,
in which case there are few limits on the potential damage
they can cause.
.TP
.B +invert
Archimedes version only.
ADFS doesn't support extensions to filenames since
dots are used as directory delimiters,
which can lead to problems when moving, for example,
source code files ending with the traditional
.Rc `` .c ''
and
.Rc `` .h ''
to the Archimedes.
Many programs allow a workaround where the file
.Rc `` foo.c ''
is accessed as
.Rc `` c.foo ''.
This option allows this form of inversion of the filename and directory
structure so that
.Rc `` *.c ''
and
.Rc `` *.h ''
would be extracted as
.Rc `` c.* ''
and
.Rc `` h.* ''.
This command usually invokes an intense sense of disbelief
in non-Archimedes owners.
.IP \&
Incidentally, non-Archimedes owners may wonder
what the Archimedes uses in place of a
.Rc `` . ''
in filenames.
It uses a
.Rc `` / '',
of course.
.TP
.B +lower
Amiga, Archimedes, OS/2, Macintosh, and UNIX versions only.
Force all file and directory names to lowercase.
Some systems store file and directory names in uppercase only.
Using this option all names will be converted to lowercase
before any operations
(such as
.RB [ v ]iew
archive,
.RB [ x ]tract
from archive, and so on),
are performed on them.
When processing Atari ST, MSDOS, and some OS/2
archives, the use of the
.B +lower
option is recommended.
.TP
.B +noext
By default HPACK will force an extension of
.Rc `` .hpk ''
(where the operating system allows it) to be added to
the archive name, with any existing extension being
replaced by
.Rc `` .hpk ''.
This option allows the default behaviour to be overridden
so that no extension is added or changed.  However this
lack of an extension will force
.I hpack
to work much harder in deciding what is and isn't an
.I hpack
archive, and will disable certain features such as its
ability to automatically pick out
.I hpack
archives when simply told to process all files in a directory.
This option is mainly for use with automated mail-processing
software such as Fidonet mail unpackers which depend on the
extension for information on the packet contents.
.TP
.B +noumask
UNIX version only.
Normally the setting of the umask environment variable
affects the attribute bits of any files and directories
.I hpack
creates.
This option overrides the umask setting and uses the attributes
stored within the archive.
Since these attributes can be set to allow outsiders read/write
access to files and directories which would normally be off-limits
to them, this option should be used with care.
.TP
.B +rsx
VMS version only.
Normally VMS files can have 39 characters of filename and 39
characters of extension, or type.
This can lead to strange-looking filenames
when they are truncated from operating systems
which allow longer or more flexible names.
Using this option truncates filenames to an RSX-11 compatible format,
which results in more traditional-looking names with 9 characters of
filename and three characters of file type, and directory names with 9
characters of filename.
.TP
.BI +select " <select-statement>"
Apply an SQL
.B select
command.
This option is explained in more detail in the section
.B "HPACK SQL Commands"
in the extended documentation.
.TP
.BI +type <type-association>
Archimedes, Apple IIgs, and Macintosh versions only.
Some operating systems store file type information for each file.
.I hpack
will, when extracting files, try to determine the type information
for each file and set it correctly.
However in some cases no type information can be determined,
or the determined information may be incorrect.
This option can be used to set type information for a file,
or to override
.IR hpack 's
internal type-determining rules.
.IP \&
Type information is given as a type-association,
associating a file extension with whatever type information
the OS requires, and is given in the form:
.Ds
.Cr "\.<extension>=<type info>{,<type info>}"
.De
.IP \&
For example to associate the Macintosh ThinkC source file type with the
extension
.Rc `` .c '',
the type argument would be
.Rc `` TEXT,KAHL '',
corresponding to the ThinkC file type and creator type.
.IP \&
Example: To associate the
.Rc `` .c ''
extension on the Macintosh
with the ThinkC source file type:
.Ds
.Cr "+type.c=TEXT,KAHL"
.De
.IP \&
Example: To associate the
.Rc `` .gif ''
extension on the Archimedes
with the GIF file type:
.Ds
.Cr "+type.gif=693"
.De
.IP \&
The types given above are actually already part of
.IR hpack 's
default rule set for type associations,
but can be overridden with the use of the
.B +type
option if desired.
.RE
.\"
.SH "HPACK Archive Integrity"
.I hpack
checks the integrity of files stored within an archive by encoding a
continuous checksum as part of each file when it is archived,
and decoding it as the file is extracted.
As soon as an error is encountered,
.I hpack
will skip over the rest of the file and move on to the next one.
If the file checksums differ then it may be reasonably assumed
that there is an error in the extracted data.
This is important: The entire physical universe, including
.I hpack
itself, may one day collapse back into an infinitely small space.
Should another universe subsequently re-emerge, the integrity of
.I hpack
archives in that universe cannot be guaranteed.
.PP
.I hpack
also checksums the archive directory.
If an error is found in the directory information, the message:
.Ds
.Cr "Warning: Archive directory corrupted.  Continue (y/n)"
.De
.PP
will be displayed.
Hitting
.Rc `` n ''
at this point will abort any attempts to
process the archive, hitting
.Rc `` y ''
will process the (damaged) archive.
.I hpack
will attempt some error recovery in this case (for example files and
directories which seem to be in impossible directories will be moved
into the root directory), and some files may be able to be recovered.
If error recovery information (specified with the
.RB [ \-e ]rror
recovery option (see the
section
.B "HPACK Options"
above)) is present,
chances of recovering data from an archive with a corrupted
directory are greatly enhanced.
.\"
.SH "HPACK Archive/Data Authentication"
Data authentication facilities in an archiver
should provide the following features:
.IP 1.
Sender authenticity.
The data could only have come from the source which it is
supposed to have come from.
.IP 2.
Data integrity measures.
Any attempt to tamper with the data should be
recognised and reported by the authentication system.
.IP 3.
Non-repudiation of origin.
The originator of the data cannot later disclaim
responsibility for it.
.PP
.I hpack
includes provisions for authenticating archived data by adding a unique
digital signature to either entire archives or individual files
within an archive.
This works exactly like a normal signature on a piece of paper,
proving that the sender was the true originator of the file or archive.
Forgery of a digital signature of this sort
is computationally infeasible,
and once the data has been signed the sender cannot later disavow
his or her signature.
In addition a cryptographic checksum of the data or archive is made
and included as part of the signature to allow detection
of any attempts to tamper with the data.
Like forging a signature, defeating the checksum is
computationally infeasible.
.PP
When the data in an archive with authentication information present is
extracted or tested, an authentication check is performed for the entire
archive before it is processed.
Similarly, an authentication check is
performed on files before they are extracted if there is authentication
information present.
.PP
In order for the authenticity information generation and checking to be
possible, two key files are required.
To secure archives, the files
.Cr secring.pgp
or
.Cr ripemprv ,
which contain the secret key of the person securing the archive,
are required.
To check secured archives, the files
.Cr pubring.pgp
or
.Cr rpubkeys ,
which contain the public key of the person or organization
who signed the file or archive are needed.
These key files are generated and managed by either version 2.0 or
higher of Philip Zimmermanns excellent
.I pgp
encryption package (for the PGP keys), or various implementations of
.IR pem ,
among them Mark Riordan's equally good
.I ripem
encryption package.
If you don't have a copy of
.I pgp
or
.IR ripem ,
it is recommended you obtain one.
.I pgp
is freely available on many archive sites,
computer bulletin boards and other systems.
.I ripem
may only be available within the United States.
.I pgp
is also required to handle any key management,
and for authentication of the keys themselves.
.I ripem
currently doesn't support much key management
or key authentication.
The
.I pgp
documentation and portions of the extended
.I hpack
documentation
.Cr hpackext.doc
are recommended reading for those wanting more
information on the background of
.I pgp
and the security techniques used by
.I pgp
and
.IR hpack .
.PP
If PEM (Privacy-Enhanced Mail) ever becomes a reality,
.I hpack
will support PEM/PKCS format keys as well as
.I pgp
ones.
This will allow data to be encrypted
and decrypted inside the US with PEM keys and outside the US with
.I pgp
keys, allowing,
for the first time, the easy transfer of public-key encrypted data to
and from the US.
.PP
Before
.I hpack
can use it, the secret keyring
.Cr secring.pgp
must have a small
amount of extta information added to it.
Details on this are given in the
section
.B "Using PGP Secret Keyrings"
below.
.PP
.I hpack
will search for the key files in the directories given in the
environment variables PGPPATH and PEMPATH.
These variables should contain the paths to any
.Cr pubring.pgp ,
.Cr secring.pgp ,
.Cr ripemprv ,
and
.Cr rpubkeys
files which are needed, with more than one path being possible.
In order to eliminate the possibility of spoofing via a bogus
keyring placed in the current directory,
.I hpack
will, like all well-designed OS shells, not search the current
directory unless this is explicitly specified in the PGPPATH or
PEMPATH variables with the use of the
.Rc ``.''
option indicating the path to the current directory.
.PP
For example if the search path for
.I pgp
keyrings included the directories
.Cr $HOME/bin/pgp ,
.Cr /usr/bin/pgp ,
and
.Cr /usr/local/pgp
then PGPPATH should be set with:
.\"--------------------------------------------------------------------
.RS
.ft \*(Cf
.nr n \w'set PGPPATH=/bin/pgp\0\0\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.Cr "set PGPPATH=/bin/pgp"
(Atari ST, MSDOS, OS/2)
.TP
.PD 0
.Cr "set PGPPATH filesys::drive.$.bin.pgp"
.TP
.Cr "set PGPPATH <PGPPATH>,filesys::drive.$.usr.bin.pgp"
.TP
.Cr "set PGPPATH <PGPPATH>,filesys::drive.$.usr.local.pgp"
(Archimedes)
.PD
.TP
.Cr "setenv PGPPATH $HOME/bin/pgp:/usr/bin/pgp:/usr/local/pgp"
(UNIX csh)
.TP
.PD 0
.Cr "export PGPPATH"
.Cr "#\ export\ before\ set\ is\ OK"
.TP
.Cr "PGPPATH=$HOME/bin/pgp:/usr/bin/pgp:/usr/local/pgp"
(UNIX sh)
.PD
.RE
.\"--------------------------------------------------------------------
.PP
The directories for
.I pgp
and
.I pem
keyrings are always searched in the order given in
the PGPPATH and PEMPATH variables.
Note that in the above example
the single-user Amiga, Atari ST, MSDOS and OS/2 systems
only have a single path for keyrings, whereas the
multiuser UNIX environments have multiple search paths
corresponding to custom user keyrings followed by
system-wide master keyrings.
.PP
If the data in the archive, or the archive itself, is to be checked,
the authentication check will be performed
using the key found in
.Cr pubring.pgp
or
.Cr rpubkeys .
If the authentication check succeeds, the message:
.Ds
.Ci "Good signature from " name .
.Ci "Signature made on " date .
.De
.PP
will be displayed, with
.I name
being the name of the person
or organization who made the signature,
and
.I date
being the date the signature was made (on some
systems the signature time may be off by a few hours
if the system doesn't adjust for different time zones properly).
If the check fails, the message:
.Ds
.Cr "Warning: Bad signature, doesn't match file contents."
.Ci "Bad signature from " name .
.Ci "Signature made on " date .
.De
.PP
will be printed.
If the archive is a multipart archive (for which the
authentication check can take some time since an archive stretching over
several disks needs to be processed), the message:
.Ds
.Cr "Verify multipart archive authenticity [y/n]"
.De
.PP
is displayed.
The answer
.Rc `` y ''
will check the authenticity of the archive,
.Rc `` n ''
will skip the authenticity check
and continue with processing the archive.
.PP
If the data in the archive, or the archive itself, is to be secured, the
authentication information will be generated using the key found in
.Cr secring.pgp
or
.Cr rpempriv .
.PP
The signature scheme used is the RSA public key cryptosystem (for more
information on this and the
.I pgp
encryption package see the extended documentation
.Cr hpackext.doc ).
This scheme involves the manipulation of very large numbers,
which can be quite time-consuming on slow systems, where the
signature generation and checking can take several minutes
(for this reason the use of authentication for entire archives
rather than individual files in an archive is recommended).
.PP
Unlike encryption software,
authentication code is not export-restricted from the US.
The U.S. Code of Federal Regulations, Title 22 which includes
sub-chapter M, ``International Traffic in Arms Regulations'' (ITAR),
makes an exception for software that can only be used
for authentication purposes and cannot not be used
for general-purpose encipherment and decipherment,
as is the case for the data authentication code in
.IR hpack .
.\"
.SH "HPACK Internationalization"
.I hpack
is available in Bavarian, Dutch, English, German,
Italian, Polish, Spanish, and Swiss German versions
using the ASCII, IBM PC (Codepage 437), IBM Codepage 850,
IBM Codepage 869, ISO 8859-1 (Latin 1), ISO 8859-2
(Latin 2), ISO 8859-3 (Latin 3), ISO 8859-4 (Latin 4),
Macintosh, Mazovia, and NeXTSTEP character sets.
The exact language and character set used by
.I hpack
is controlled by the environment variables
CHARSET and LANGUAGE.
By default
.I hpack
interacts with users in English using the ASCII/ISO646
character set.
By setting these two variables, another
language and/or character set can be selected.
Note that not all combinations of languages and character
sets will provide a useful result.
.PP
Possible options for LANGUAGE are
.Cr bavarian ,
.Cr dutch ,
.Cr english ,
.Cr german ,
.Cr italian ,
.Cr polish ,
.Cr spanish ,
and
.Cr swiss .
.PP
Possible options for CHARSET are
.Cr ascii ,
.Cr cp850 ,
.Cr cp869 ,
.Cr ibmpc ,
.Cr iso8859-1 ,
.Cr iso8859-2 ,
.Cr iso8859-3 ,
.Cr iso8859-4 ,
.Cr macintosh ,
.Cr mazovia ,
and
.Cr nextstep .
.PP
For example to set
.I hpack
to interact with the user in Italian using the
ISO 8859-1 (Latin 1) character set, the environment
variables should be set as follows:
.\"--------------------------------------------------------------------
.RS
.ft \*(Cf
.nr n \w'export CHARSET;  CHARSET=is08859-1\0\0\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.PD 0
.Cr "set LANGUAGE=italian"
.TP
.Cr "set CHARSET=iso8859-1"
.PD
(MSDOS, OS/2)
.TP
.PD 0
.Cr "setenv LANGUAGE=italian"
.TP
.Cr "setenv CHARSET=iso8859-1"
.PD
(UNIX csh)
.TP
.PD 0
.Cr "export LANGUAGE; LANGUAGE=italian"
.TP
.Cr "export CHARSET;  CHARSET=iso8859-1"
.PD
(UNIX sh)
.RE
.\"--------------------------------------------------------------------
.\"
.SH "Obtaining Public Keys"
There are currently several key servers which
can be used to obtain
.I pgp
public keys through the Internet and UUCP
email systems.
These are a convenient way of
obtaining keys for people you wish to
communicate with.
The servers do
.B not
attempt to
guarantee that a key is a valid key \(em the
signators on the key should be used for that
kind of security.
These services can be discontinued at any time
without prior notification.
.PP
Operating key servers as of 1 April 1993 are:
.\"--------------------------------------------------------------------
.nr t0 \w'Administrator:\0\0\0\0'u
.ta \n(t0u
.Ds
.ne 4
.Rc "Server:\t" pgp-public-keys@pgp.iastate.edu
.Rc "Administrator:\tMichael Graff " <explorer@iastate.edu>
Site:\&\&	Iowa State University
.Rc "FTP:\t"    tbird.cc.iastate.edu:/usr/explorer/public-keys.pgp
.Sp
.ne 4
.Rc "Server:\t" pgp-public-keys@toxicwaste.mit.edu
.Rc "Administrator:\tDerek Atkins " <warlord@MIT.EDU>
Site:\&\&	MIT/Athena
.Rc "FTP:\t"    toxicwaste.mit.edu:/pub/keys/public-keys.pgp
.Sp
.ne 4
.Rc "Server:\t" pgp-public-keys@phil.utmb.edu
.Rc "Administrator:\tJohn Perry " <perry@phil.utmb.edu>
Site:\&\&	University of Texas
.Rc "FTP:\t"    phil.utmb.edu:/pub/pgp/public-keys.pgp
.Sp
.ne 3
.Rc "Server:\t" pgp-public-keys@cs.tamu.edu
.Rc "Administrator:\tGary Ratterree " <garyr@cs.tamu.edu>
Site:\&\&	Texas A&M University
.Sp
.ne 4
.Rc "Server:\t" pgp-public-keys@demon.co.uk
.Rc "Administrator:\tMark Turner " <mark@demon.co.uk>
Site:\&\&	Demon Internet Services, UK
.Rc "FTP:\t"    ftp.demon.co.uk:/pub/pgp/pubring.pgp
.Sp
.ne 2
.Rc "Server:\t" pgp-public-keys@chao.sw.oz.au
.Rc "Administrator:\tJeremy Fitzhardinge " <jeremy@sw.oz.au>
.Sp
.ne 3
.Rc "Server:\t" pgp-public-keys@kiae.su
.Rc "Administrator:\tVictor Borisov " <blaster@rd.relcom.msk.su>
Site:\&\&   Relcom Corporation, Moscow
.Sp
.ne 4
.Rc "Server (UUCP):\t" pgp-public-keys@jpunix.com
.Rc "\t"        (uunet!jpunix!pgp-public-keys)
.Rc "Administrator:\tJohn Perry " <perry@jpunix.com>
Site:\&\&	J. P. and Associates
.Sp
.ne 2
.Rc "Server (UUCP):\t" pgp-public-keys@proxima.alt.za
.Rc "Administrator:\tLucio de Re " <lucio@proxima.Alt.ZA>
.De
.\"--------------------------------------------------------------------
.PP
Updates to this list are posted to the Usenet
.Cr alt.security.pgp
newsgroups.
.PP
Each keyserver processes requests in the form of
mail messages.
The commands for the server are entered on the
.Rc `` Subject: ''
line of the message, for example:
.PP
.Ds
.Cr "To: pgp-public-keys@junkbox.cc.iastate.edu"
.Cr "Subject: help"
.De
.PP
In the above example the server will return an
informational message on how to use it.
Other possible commands are:
.\"--------------------------------------------------------------------
.RS
.ft \*(Cf
.nr n \w'VERBOSE INDEX\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.B Command
.B "Message body contains"
.TP
.PD 0
.Cr ADD
Your PGP public key to add to server.
.TP
.Cr INDEX
Returned list of all PGP keys the server knows about
(the same as the output from PGP's
.B \-kv
command).
.TP
.Cr "VERBOSE INDEX"
Returned list of all PGP keys in verbose format
(the same as the output from PGP's
.B \-kvv
command).
.TP
.Cr GET
Returned complete public key ring from the server.
.TP
.Ci GET " userID"
Returned public key for the given
.IR userID .
.TP
.Ci MGET " regexp"
Returned set of keys for which the userID matches the given
.IR regexp .
.PD
.RE
.\"--------------------------------------------------------------------
.PP
To have your key added to the collection maintained by
the key servers, save your public key to a file in
ASCII-armoured format and simply mail it to one of the
.I pgp
key servers using
.Cr add
as the message subject line.
For example with most
command-line oriented mailers the command would be:
.PP
.Ds
.Cr "mail -s add <server address> < file.asc"
.De
.PP
To get the key for the userID
.Rc `` pgut1 ''
(my own public key), the command would be:
.PP
.Ds
.ft \*(Cf
mail -s "get pgut1" <server address>
.ft R
.De
.PP
To get multiple keys using the mget command,
possible options are:
.PP
.\"--------------------------------------------------------------------
.RS
.ft \*(Cf
.nr n \w'mget F605A5|3A738B\0\0\0\0'+1n-1/1n
.ft R
.TP \nn
.PD 0
.Cr "mget michael"
Gets all keys whose userIDs contain ``michael''.
.TP
.Cr "mget F605A5|3A738B"
Gets the two keys with the given keyIDs.
.PD
.RE
.\"--------------------------------------------------------------------
.PP
In  addition to this service, there is a large
collection of public keys available for
anonymous FTP at:
.PP
.Ds
.Cr "ftp.informatik.uni-hamburg.de:/pub/virus/misc/pubkring.pgp"
.De
.PP
To have your key added to the collection send it to Vesselin Bontchev,
.Cr bontchev@fbihh.informatik.uni-hamburg.de .
.\"
.SH "HPACK Archive/Data Encryption"
.I hpack
allows data stored in an archive to be encrypted
with a variety of public or conventional-key encryption algorithms.
Encryption of either entire archives or individual files is possible,
as well as the use of multiple keys to encrypt different sections
of an archive (though the use of public-key encryption is preferred
for this since its inherent automatic key management
greatly simplifies handling the encrypted data).
.PP
When chosing an encryption key for a conventional-key algorithm,
the following guidelines should be observed:
.IP \(bu
.I hpack
allows keys of up to 80 characters in length.
These keys can contain letters, numbers, spaces, and punctuation.
This fact should be made use of to the fullest,
with preferred passwords being entire phrases
rather than individual words.
There exist programs designed to allow high-speed password
cracking of conventional-key encryption algorithms which can,
in a matter of hours (sometimes minutes,
even seconds in the case of very weak algorithms),
attempt to use the contents of an average large dictionary
as sample passwords.
Most passwords composed of single words can be broken with ease
in this manner,
even in the case of algorithms like the MDC one which is used by
.IR hpack ,
which has been specially designed to be resistant
to this form of attack (doing a brute-force search
of all 8-letter passwords (the minimum length allowed by
.IR hpack )
assuming a worst-case situation in which the password contains lowercase
letters only, can be accomplished in 662 years on a fast CPU
(Sparcstation IPX) if the attacker knows the contents
of the encrypted file(s) in advance \(em
or about 8 months on a network of 1000 of these machines.
Using an intelligent
dictionary-based cracking program will reduce this time
significantly).  This is especially apparent if the
encryption algorithm used is very weak \(em the Pkzip encryption,
for example, can be broken in this manner in a few seconds
on a cheap personal computer using the standard Unix
.Cr /usr/dict
wordlist).
.IP \(bu
Simple modifications to passwords should not be trusted.
Capitalizing some letters, spelling the word backwards,
adding one or two digits to the end,
and so on,
only present a slightly more difficult challenge to the average
password-cracker than plain unadorned passwords.
.IP \(bu
Probably the most difficult passwords to crack in this manner are ones
comprising phrases or sentences,
since instead of searching a small body of
text like the contents of a dictionary,
the cracker must search a much larger corpus of data,
namely all possible phrases in the language being used.
Needless to say, the use of common phrases should be avoided,
since these will be an obvious target for crackers.
.PP
As is the case when using public-key encryption for data and archive
authentication, the secret keyring
.Cr secring.pgp
will need to have a small quantity of extra information added to it,
for which details are given in the section
.B "Using PGP Secret Keyrings"
below.
.\"
.SH "Using PGP Secret Keyrings"
Like
.I pgp
and
.I pem
implementations,
.I hpack
can store its secret keys in an encrypted format
to protect them from prying eyes.
However the encryption algorithm
.I hpack
uses is somewhat different to the one used in
.I pgp
due to patent restrictions and in
.I pem
due to export restrictions.
This means that encrypted
.I pgp
keyrings need to have a small amount of extra information
added to them before
.I hpack
can use them.
The
.I hpack
distribution includes a utility called
.I keycvt
which performs this task.
.I keycvt
is run as follows:
.Ds
.Cr "keycvt <PGP secret keyring> [<output keyfile>]"
.De
.PP
Normally
.I keycvt
will append the extra information to the existing
keyring.
However if an optional output keyfile
name is given, the extra information will be
written to the output file instead of being
added to the keyring.
.PP
The source keyring may contain one or more secret keys.
For each key in the file,
.I keycvt
will display its key information and ask:
.Ds
.Cr "Add information for this key so HPACK can use it (y/n)"
.De
.PP
An
.Rc `` n ''
response will cause
.I keycvt
to print:
.Ds
.Cr "Skipping key..."
.De
.PP
and move on to the next key.
A
.Rc `` y ''
response will cause
.I keycvt
to try to add the extra information needed by
.IR hpack .
If the key is encrypted,
.I keycvt
will
ask for the decryption password:
.Ds
.Cr "Please enter password for this private key."
.Cr "Warning: Password will be echoed to screen!"
.Cr "Password:"
.De
.PP
If the incorrect password is entered,
.I keycvt
will warn:
.Ds
.Cr "Incorrect checksum, possibly due to incorrect password"
.De
.PP
and allow it to be reentered.
Up to three attempts at the password are allowed before
.I keycvt
gives up.
When the key has been read in,
.I keycvt
will add the
extra information encrypted with the same password as was used for the
decryption.
This is the password which
.IR hpack ,
like
.I pgp
and
.I pem
implementations, will use to decrypt the secret key.
.PP
Please note that, unlike
.IR hpack ,
.I keycvt
.B will
echo the password entered to the screen.
Since
.I keycvt
is a one-use only application and since obtaining
keyboard input without echo is quite difficult
on many systems,
.I keycvt
uses a standard input routine to obtain its
password.
In addition, the password used for
.I keycvt
should follow the same rules as
.IR hpack ,
namely the key should be 8 characters or more long
(see the section
.B "HPACK Archive/Data Encryption"
below for more details).
.PP
Finally, when
.I keycvt
has finished processing the key file, it will ask:
.Ds
.Cr "Finished processing keys. Add new key information to output keyring (y/n)"
.De
.PP
A
.Rc `` y ''
response will add the new key information
to the output key file.
If no keys were converted or an
.Rc `` n ''
response is given,
.I keycvt
will display:
.Ds
.Cr "No keys converted, output file left unchanged."
.De
.PP
In addition,
.I keycvt
will create the seed file needed by
.I hpack
in the same directory as the
.I pgp
seed file if it doesn't already exist.
If the seed file already exists,
.I keycvt
will display:
.Ds
.Cr "Existing HPACK seed file left unchanged."
.De
.PP
and exit.
If the file doesn't exist,
.I hpack
will create it and display:
.Ds
.Cr "HPACK seed file created"
.De
.PP
before exiting.
.PP
This seed file can also be created manually by
copying the
.I pgp
seed file
.Cr randseed.bin
to a new file
.Cr hpakseed.bin .
.\"
.SH "Authentication of HPACK Executables"
There have been several occasions in the past when fake versions of new
archivers have been distributed.
Sometimes these fake release are even wrapped
up in a nice-looking ``security envelope''
guaranteeing their authenticity.
Since the source code is freely available,
it's all too easy for anyone to create a fake version of
.I hpack
in which the encryption or authentication code has been compromised.
In order to avoid any problems in this respect,
the distributed
.I hpack
executables are accompanied by a digital signature (see the
section
.B "HPACK Archive/Data Authentication"
above) which can be used to verify
that it is indeed an official version.
Unlike the schemes used by other archivers,
it is computationally infeasible to compromise this method of
authentication.
.PP
In order to check the authenticity of the particular version of
.IR hpack ,
you will need the
.I pgp
encryption package (see the section
.B "HPACK Archive/Data Authentication"
above), and my public key, which is included in the standard
.I pgp
distribution and also in the
.I hpack
distribution.
My key is signed by Philip Zimmermann, the original author of
.IR pgp ,
and several members of the
.I pgp
development team.
First, you should check my key for authenticity:
.Ds
.Cr "pgp \-kc 'Peter Gutmann'"
.De
.PP
When it performs the key check,
.I pgp
should display the following signatures:
.Ws
.ft \*(Cf
Type bits/keyID     Date    User ID
pub  1024/997D47 1992/08/02 Peter Gutmann <pgut1@cs.aukuni.ac.nz>
sig!      E722D9 1992/11/26   Branko Lankester <lankeste@fwi.uva.nl>
sig!      997D47 1992/10/11   Peter Gutmann <pgut1@cs.aukuni.ac.nz>
sig!      7C02F9 1992/09/07   Felipe Rodriquez <nonsenso@utopia.hacktic.nl>
sig!      1336F5 1992/09/05   Harry Bush <Harry@castle.riga.lv>
sig!      67F70B 1992/09/02   Philip R. Zimmermann <prz@sage.cgd.ucar.edu>
.ft R
.We
.PP
Version 2.1 and up of
.I pgp
can, in addition, calculate a key fingerprint for a key.
This can be calculated with:
.Ds
.Cr "pgp \-kvc 'Peter Gutmann'"
.De
.PP
.I pgp
should display the following:
.Ws
.ft \*(Cf
pub  1024/997D47 1992/08/02 Peter Gutmann <pgut1@cs.aukuni.ac.nz>
          Key fingerprint = 7C 6D 81 DF F2 62 0F 4A  67 0E 86 50 99 7E A6 B1
.ft R
.We
.PP
If the
.I keyID
or key fingerprint for my key differs from the one shown
above or the signatures don't check out, then the key is a probably a
fake and shouldn't be trusted.
Assuming the key is in order, the authenticity of the program
itself and the internationalization information can be
checked with:
.Ds
.Cr "pgp <program name> hpack.sig"
.Cr "pgp <internationalization file name> language.sig"
.De
.PP
where
.Cr hpack.sig
and
.Cr language.sig
are the digital signatures included with the program as distributed.
For example to check the authenticity of the Amiga
.I hpack
executable type:
.Ds
.Cr "pgp hpack hpack.sig"
.Cr "pgp language.dat language.sig"
.De
.PP
When it performs the check,
.I pgp
should display:
.Ds
.Cr "Good\ signature\ from\ user\ Peter\ Gutmann\ <pgut1@cs.aukuni.ac.nz>."
.Cr "Signature made <date of signature>"
.De
.PP
If
.I pgp
reports a bad signature then the executable shouldn't be trusted.
A new, hopefully untouched,
version can be obtained from any archive site, BBS,
or system which carries the standard
.I hpack
distribution, or you can arrange to get it directly from the author.
.\"
.SH "Using HPACK Encryption in the US"
The following section is only of interested to
.I hpack
users residing in the US \(em non-US
.I hpack
users can skip it.
.PP
The RSA public-key encryption algorithm is covered by
US Patent 4,405,829, and also by US Patent 4,218,582.
The exclusive licensing rights to both patents are held
by Public Key Partners (PKP) of Sunnyvale, California.
The US version of
.I hpack
uses a special set of routines called
.B RSAREF
which are available from RSA Laboratories, which is the
research and development division of RSA Data Security,
Inc., the company founded by the inventors of the RSA
public-key cryptosystem.
RSA Laboratories reviews, designs and implements
secure and efficient cryptosystems of all kinds.
Its clients include government agencies,
telecommunications companies, computer manufacturers,
software developers, cable TV broadcasters, interactive video
manufacturers, and satellite broadcast companies, among others.
.PP
RSA Laboratories have granted users of
.I hpack
permission to make a small number of changes to the
.B RSAREF
code in order to integrate it into
.IR hpack .
More details on this integration are contained in the
.Rc `` readme ''
file included in the
.I hpack
distribution.
This applies only for noncommercial use of
.IR hpack .
Anyone intending to use
.I hpack
commercially should contact RSA Laboratories at the
address given below.
.PP
Everyone who wishes to compile
.I hpack
themselves must obtain their own copy of
.BR RSAREF .
Free licenses to redistribute
.B RSAREF
are available.
For information, please send electronic
mail to
.Cr <rsaref-administrator@rsa.com> .
.PP
.B RSAREF
is available to citizens and permanent residents of the US.
It can't be sent outside the United States, or given to anyone
who is not a United States citizen and doesn't have a
``green card''.
These are US State and Commerce Department
requirements, because the code in
.B RSAREF
is export-controlled technology.
(Incidentally, the fastest
implementation I've ever seen of the conventional cipher used
in
.B RSAREF
was written in Moscow, but that's another story).
.PP
Any questions on the
.B RSAREF
software, licenses, export restrictions, or other RSA
Laboratories offerings should be addressed to:
.\"--------------------------------------------------------------------
.nr t0 \w'Redwood City, CA  94065\0\0\0\0\0\0\0\0'u
.ta \n(t0u
.Ds
RSA Laboratories\&\&\&\&	RSA Data Security, Inc.
10 Twin Dolphin Drive\&\&	100 Marine Parkway
Redwood City, CA  94065\&	Redwood City, CA  94065
USA\&\&\&\&\&\&\&\&\&\&\&	USA
.Sp
(415) 595-7703\&\&\&\&\&	(415) 595-8782
(415) 595-4126 (fax)\&\&	(415) 595-1873 (fax)
.De
.\"--------------------------------------------------------------------
.PP
or via email to
.Cr <rsaref-administrator@rsa.com> .
.\"
.SH CREDITS
Many people have helped to get
.I hpack
where it is today, among them
(in no particular order):
.PP
Ports to different operating systems:
.IP \&
Stuart Woolford did the UNIX port.
.IP \&
John Burnell did the OS/2 port.
.IP \&
Jason Williams and Edouard Poor helped with the Archimedes port.
.IP \&
Nick Little and Joerg Plate helped with the Amiga port.
.IP \&
Martin Braschler did the Atari ST/TT port.
.PP
Translations:
.IP \&
Peter Sowa and Martin Braschler did the German translation.
.IP \&
Peter de Vocht did the Dutch translation.
.IP \&
Arrigo Triulzi did the Italian translation.
.IP \&
Rafal Mazkowski did the Polish translation.
.IP \&
Eduardo Jacob did the Spanish translation.
.IP \&
Martin Braschler did the Swiss German translation.
.IP \&
Peter Gutmann had a go at the Klingon translation.
.PP
Documentation:
.IP \&
DaviD W. Sanderson
.Rc ( dws@ssec.wisc.edu )
did major formatting work on the man page.
.\"
.SH "CONTACTING THE AUTHOR"
You can contact me in any of the following ways:
.IP \(bu
By calling me on +64 9 426-5097 within reasonable hours (10am\-12pm NZT).
.IP \(bu
By Usenet email to either
.Cr pgut1@cs.aukuni.ac.nz
(preferred), or
.Cr p_gutmann@cs.aukuni.ac.nz ,
.Cr peterg@kcbbs.gen.nz ,
or
.Cr peter@nacjack.gen.nz
(in rough order of preference).
.IP \(bu
By Fidonet email to Peter Gutmann at
.Cr 3:772/90.0 .
However this is probably about as
reliable a link as using carrier mackerel across the Sahara.
.IP \(bu
By snail mail to 24 Durness Pl, Orewa, Auckland, New Zealand
.IP \(bu
By throwing a bottle in the ocean
(slightly less reliable than the Fidonet link).
.IP \(bu
By implanting subliminal messages in the music I listen to.
.\"
.SH "HPACK Error Messages"
The error messages given by
.I hpack
are the following:
.Ep "No matching files on disk"
The command you have given resulted in no changes being made
to the archive(s) specified,
due to the files you specified not being found on the disk.
.Ep "No matching files in archive"
The command you have given resulted in no changes being made
to the archive(s) specified.
There can be several reasons for this, among them being that there
were no matching files in the archive to replace/update,
or that there were no
matching files in the root directory of the archive
.RI ( hpack
will not, by default, check subdirectories:
To handle subdirectories you must either
give the full path within the archive, or use the
.RB [ \-r ]ecurse
subdirectories option).
.Ep "No matching archives found"
The command you have given resulted in no changes being made
to the archive(s) specified, as they could not be found on the disk.
.Ep "Out of disk space"
There is not enough room on the current disk
to finish archiving/unarchiving a file.
.Ep "Unknown command"
You have given
.I hpack
a command which it doesn't understand.
Check the
section
.B "HPACK Commands"
for valid
.I hpack
commands.
.Ep "Unknown option"
You have given
.I hpack
an option which it doesn't understand.
Check the
section
.B "HPACK Options"
for valid
.I hpack
options.
.Ep "Unknown overwrite option"
You have specified an unknown option for the
.RB [ \-o ]verwrite
switch.
This error
may also be caused by forgetting to specify an option for the switch,
in which case
.I hpack
will treat the character following the
.B \-o
as the option.
.Ep "Unknown view option"
You have specified an unknown option for the
.RB [ \-v ]iew
options switch.
This error may also be caused by forgetting to specify an option for
the switch, in which case
.I hpack
will treat the character following the
.B \-v
as the option.
.Ep "Unknown directory option"
You have specified an unknown option for the
.RB [ \-d ]irectory
options
switch.
This error may also be caused by forgetting to specify an option for the
switch, in which case
.I hpack
will treat the character following the
.B \-d
as the option.
.Ep "Bad wildcard format"
You have used an incorrect format when using wildcards in filenames.
.Ep "Wildcard expression too complex
You have used a very complex wildcard sequence, and
.I hpack
doesn't have enough room to process it fully.
Try simplifying the expression, or break it up into
separate simpler expressions.
.Ep "Cannot use wildcards in external pathname"
You have used wildcards in a pathname outside the archive.
Since
.IR hpack 's
extended wildcards are built on top
of the usual operating system ones (if they exist)
the resulting system would run very slowly if they had to be simulated
on an external filesystem.
.Ep "Not an HPACK archive"
The supposed archive file does not appear to be an archive
created by
.IR hpack .
.Ep "Cannot open archive file"
.I hpack
cannot open the archive file.
.Ep "Cannot open data file \- skipping"
.I hpack
cannot open the data file to dearchive data to, and is
skipping to the next file to be processed.
.Ep "Cannot open temp file"
.I hpack
cannot open the temporary work file it needs for the
.RB [ d ]elete,
.RB [ f ]reshen,
.RB [ r ]eplace,
or
.RB [ u ]pdate
commands.
.Ep "Cannot open script file \- skipping"
.I hpack
cannot open the script file containing the list of files
to process and
.I hpack
control commands, and is skipping to the next file to be
processed.
.Ep "Cannot access base directory"
The base directory you have specified does not exist.
.Ep "Cannot create directory"
.I hpack
cannot create a directory to unarchive files into.
.Ep "Cannot override base path"
This error message arises when using the
.RB [ \-b ]ase
path option and
either a drive specifier is given in the pathname of one of the files
to process or the base path includes an actual path and the file
pathname is specified as being off the root directory.
Since the base path is prepended to the pathname of
the file,
the pathname cannot contain a drive specifier or absolute directory
reference in it.
.Ep "Unknown archiving method \- skipping"
The version of
.I hpack
you are using is unfamiliar with the archiving
method used for this file, and is skipping to the next file
to be processed.
.Ep "Data is encrypted \- skipping"
The data in this file is encrypted, and no means of decryption has been
supplied by the user; therefore
.I hpack
cannot process it and will
move on to the next file to be processed.
.Ep "Cannot process encrypted archive"
The entire archive (rather than just the data in it) is encrypted, and
.I hpack
cannot decrypt it to read it.
This is either because no decryption password
has been supplied, or because the archive is encrypted with an
encryption method for which no decryption information is available.
.Ep "Cannot change deleted archive"
You have used the
.RB [ \-k ]ill
original archive option along with the
.RB [ r ]eplace,
.RB [ f ]reshen,
or
.RB [ u ]pdate
options.
.Ep "Cannot change multipart archive"
You have asked
.I hpack
to
.RB [ f ]reshen,
.RB [ u ]pdate,
.RB [ r ]eplace,
or
.RB [ d ]elete
files in a multipart archive, which would involve rewriting an archive
spread across multiple disks.
.Ep "Cannot change unit-compressed archive"
If an archive is compressed as one unit, it cannot later be changed
in any way.
Unit-compressed archives trade off compressed size for flexibility in
updating them.
.Ep "Cannot change encrypted archive"
You have asked
.I hpack
to
.RB [ a ]dd,
.RB [ f ]reshen,
.RB [ u ]pdate,
.RB [ r ]eplace,
.RB [ d ]elete,
or
.RB [ x ]tract
with move, files in an encrypted archive.
Files or data in an encrypted archive cannot be changed
without decrypting and re-encrypting the entire archive.
.Ep "Cannot change unencrypted archive"
You have asked
.I hpack
to make changes to an unencrypted archive, using block-encryption.
.I hpack
will not retroactively encrypt the archive, however
the files can be individually encrypted as they are added
to the archive.
.Ep "Cannot use both conventional and public-key encryption"
You have specified that data be both conventional and public-key
encrypted.
Data can be encrypted with one of the two methods,
but not with both at once.
.Ep "Passwords not the same"
When encrypting data,
.I hpack
will ask you to retype the password for security.
If the second password doesn't match the first password,
this error message is issued.
.Ep "Password must be between 8 and 80 characters long"
The passphrase you have entered is either less than eight characters
(making it dangerously short), or more than 80 characters
(making it excessively long).
.Ep "Bad keyfile"
The keyfile containing the keys used for decrypting and
authenticating data is corrupted.
.Ep "Missing userID for encryption/authentication"
You have forgotten to specify a
.I userID
when adding authentication
information to an archive, or when using public-key encryption,
or haven't given a primary
.I userID
for public-key encryption when using a secondary
.IR userID .
.Ep "Cannot find secret key for userID"
The secret key needed to add authentication information to data
for the given
.I userID
cannot be found, and the authentication
information cannot be added.
.Ep "Cannot find public key for userID"
The public key needed to encrypt data for the given
.I userID
cannot be
found, and the encryption can't be carried out.
.Ep "Cannot find secret key \- cannot decrypt data"
The secret key needed to decrypt the data cannot be found,
and the data cannot be decrypted.
This message will also occur if the secret key exists
but hasn't been processed with the
.I keycvt
utility, which adds a small amount of extra information needed by
.I hpack
to use the key.
See the section
.B "Using PGP Secret Keyrings"
above for more details.
.\" This is extra long, so prevent line breaking
.Ep "Cannot\ find\ public\ key\ \-\ cannot\ perform\ authentication\ check"
The public key for the authentication information attached to the data
or archive can't be found, and thus the data authentication check can't
be carried out.
.\" This is extra long, so prevent line breaking
.Ep "Authentication\ data\ corrupted\ \-\ cannot\ perform\ authentication\ check"
The information used for authenticating the data in an archive has been
corrupted.
.Ep "Cannot read random seed file"
The random seed file needed for public-key encryption cannot be read.
If it doesn't exist or has been accidentally destroyed, a new one
should be created either using the
.I keycvt
utility or manually.
See the section
.B "Using PGP Secret Keyrings"
above for more details.
.Ep "Archive directory corrupted"
The archive directory information has been corrupted.
Depending on how bad the corruption is,
.I hpack
will either exit or prompt the user for whether it should
try to continue,
attempting to fix any errors in the directory as it processes it.
.Ep "Out of memory"
There is not enough memory available for
.I hpack
to continue.
.Ep "Path too long"
You have used more than the maximum allowable number of characters
(the limit set by the host OS) in a pathname.
.Ep "Path not found"
You have asked
.I hpack
to add a file to a nonexistent directory inside an
archive.
.Ep "Bad character in filename"
Input lines in script files are given a basic check for being
valid filenames.
If blatantly incorrect characters are discovered in a line of input this
warning will be printed.
.Ep "Errors detected in script file"
Errors (either illegal characters or too-long pathnames)
have been detected in the script file.
.Ep "Maximum level of errors detected in script file"
More than 10 errors have been detected in the script file.
This error message generally results from erroneously specifying
a non-script file as a script file.
.Ep "Too many levels of directory nesting"
You have tried to go down through more than 15 levels
of subdirectories using the
.RB [ \-r ]ecurse
subdirectories option.
.Ep "Stopped at user request"
The user or some other program interrupted
.I hpack
during the archiving process
(for example by pressing the ``Break'' key
or by sending it a termination signal).
.Ep "Truncated EOF padding"
In some implementations of the Xmodem and Ymodem transfer protocols,
CP/M end-of-file characters (Ctrl-Z's) are appended to the end
of the transmitted file.
When
.I hpack
detects these spurious characters on the end of an archive,
it will truncate the archive to its correct size and issue this warning
message.
.Ep "Archive section too short, skipping..."
If part of a multipart archive is less than
approximately 500 bytes long,
.I hpack
will not attempt to create the
archive but will move the data to the next, hopefully less full, disk.
.Ep "File error"
A miscellaneous type of file error occurred during the archiving process
(for example some sort of network error).
The message itself will if possible
contain more detail about the precise type of error.
.Ep "Internal error"
Some form of internal error occurred in
.IR hpack .
Contact the author with details on how the error was brought about.
.Ep "Long argument format not supported in this version"
Some CLI versions of
.IR hpack ,
notably the Amiga, Archimedes, Mac-CLI,
MSDOS, OS/2, UNIX, and VMS ones, support a long argument format
signalled by the \-z switch, which is used to handle
OS-specific options.
The version you are using doesn't support this option.
.\"
.SH DISCLAIMER
This program is guaranteed to perform as claimed,
excluding any delays caused or enhanced by war,
civil commotion, or rioting, whether declared, spontaneous,
reprehensible, or justified; undue pressure to perform,
from whatsoever source;
mal de mer, mal de pays, mal de siecle, mal de code, mal de machine,
or any force majeure not pretofore invoked.
.PP
The program warranty is void in case of nuclear war,
whether caused by the program or not.
.\"
.SH TRADEMARKS
Amiga is a trademark of Commodore Business Machines.
.br
Archimedes is a trademark of Acorn Computers.
.br
GIF is a trademark of Compuserve Inc.
.br
IBM is a trademark of International Business Machines Corp.
.br
Macintosh is a trademark of Apple Computer Inc.
.br
MSDOS is a trademark of Microsoft Inc.
.br
OS/2 is a trademark of International Business Machines Corp.
.br
PKZIP is a trademark of PKWare Inc.
.br
Prime and Primos are a trademark's of Prime Computer Corp.
.br
QNX is a trademark of
.IR someone .
.br
Rolemaster is a trademark of Iron Crown Enterprises Inc.
.br
StuffIt is a trademark of Raymond Lau and Aladdin Systems.
.br
ThinkC is a trademark of Symantec Corporation.
.br
UNIX is both a trademark and a footnote of AT&T.
.br
Windoze is not a trademark of Microsoft Corp.
.br
Windows is,
but it's a somewhat less accurate description of its performance.
.br
These trademark lists are a trademark of too many lawyers and too few
people with common sense being involved.
.PP
``Good compression isn't a matter of life and death \(em it's far more
important than that''
